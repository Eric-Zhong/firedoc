{
    "project": {
        "name": "yuidoc-root",
        "description": "Fire Doc, Fireball-x's JavaScript Documentation engine forked from YUI.",
        "version": "0.8.0"
    },
    "files": {
        "conf/docs/assets/vendor/prettify/prettify.js": {
            "name": "conf/docs/assets/vendor/prettify/prettify.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/builder.js": {
            "name": "lib/builder.js",
            "modules": {},
            "classes": {
                "DocBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/cli.js": {
            "name": "lib/cli.js",
            "modules": {},
            "classes": {
                "CLI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/docparser.js": {
            "name": "lib/docparser.js",
            "modules": {},
            "classes": {
                "DocParser": 1
            },
            "fors": {
                "DocParser": 1
            },
            "namespaces": {}
        },
        "lib/docview.js": {
            "name": "lib/docview.js",
            "modules": {},
            "classes": {
                "DocView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/files.js": {
            "name": "lib/files.js",
            "modules": {},
            "classes": {
                "Files": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/help.js": {
            "name": "lib/help.js",
            "modules": {},
            "classes": {
                "Help": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/options.js": {
            "name": "lib/options.js",
            "modules": {},
            "classes": {
                "Options": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/project.js": {
            "name": "lib/project.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/server.js": {
            "name": "lib/server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/utils.js": {
            "name": "lib/utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/yuidoc.js": {
            "name": "lib/yuidoc.js",
            "modules": {
                "yuidoc": 1
            },
            "classes": {
                "YUIDoc": 1
            },
            "fors": {
                "YUIDoc": 1
            },
            "namespaces": {}
        },
        "tests/input/charts/AreaSeries.js": {
            "name": "tests/input/charts/AreaSeries.js",
            "modules": {},
            "classes": {
                "AreaSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/AreaSplineSeries.js": {
            "name": "tests/input/charts/AreaSplineSeries.js",
            "modules": {},
            "classes": {
                "AreaSplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Axis.js": {
            "name": "tests/input/charts/Axis.js",
            "modules": {},
            "classes": {
                "Axis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/AxisType.js": {
            "name": "tests/input/charts/AxisType.js",
            "modules": {},
            "classes": {
                "AxisType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/BarSeries.js": {
            "name": "tests/input/charts/BarSeries.js",
            "modules": {},
            "classes": {
                "BarSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/BottomAxisLayout.js": {
            "name": "tests/input/charts/BottomAxisLayout.js",
            "modules": {},
            "classes": {
                "BottomAxisLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CartesianChart.js": {
            "name": "tests/input/charts/CartesianChart.js",
            "modules": {},
            "classes": {
                "CartesianChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CartesianChartLegend.js": {
            "name": "tests/input/charts/CartesianChartLegend.js",
            "modules": {
                "charts-legend": 1
            },
            "classes": {
                "HorizontalLegendLayout": 1,
                "VerticalLegendLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CartesianSeries.js": {
            "name": "tests/input/charts/CartesianSeries.js",
            "modules": {},
            "classes": {
                "CartesianSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CategoryAxis.js": {
            "name": "tests/input/charts/CategoryAxis.js",
            "modules": {},
            "classes": {
                "CategoryAxis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Chart.js": {
            "name": "tests/input/charts/Chart.js",
            "modules": {},
            "classes": {
                "Chart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ChartBase.js": {
            "name": "tests/input/charts/ChartBase.js",
            "modules": {},
            "classes": {
                "ChartBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ChartLegend.js": {
            "name": "tests/input/charts/ChartLegend.js",
            "modules": {},
            "classes": {
                "ChartLegend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CircleGroup.js": {
            "name": "tests/input/charts/CircleGroup.js",
            "modules": {},
            "classes": {
                "GroupCircle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ColumnSeries.js": {
            "name": "tests/input/charts/ColumnSeries.js",
            "modules": {},
            "classes": {
                "ColumnSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ComboSeries.js": {
            "name": "tests/input/charts/ComboSeries.js",
            "modules": {},
            "classes": {
                "ComboSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ComboSplineSeries.js": {
            "name": "tests/input/charts/ComboSplineSeries.js",
            "modules": {},
            "classes": {
                "ComboSplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/CurveUtil.js": {
            "name": "tests/input/charts/CurveUtil.js",
            "modules": {},
            "classes": {
                "CurveUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/DiamondGroup.js": {
            "name": "tests/input/charts/DiamondGroup.js",
            "modules": {},
            "classes": {
                "GroupDiamond": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/EllipseGroup.js": {
            "name": "tests/input/charts/EllipseGroup.js",
            "modules": {},
            "classes": {
                "EllipseGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Fills.js": {
            "name": "tests/input/charts/Fills.js",
            "modules": {},
            "classes": {
                "Fills": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Graph.js": {
            "name": "tests/input/charts/Graph.js",
            "modules": {},
            "classes": {
                "Graph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Gridlines.js": {
            "name": "tests/input/charts/Gridlines.js",
            "modules": {},
            "classes": {
                "Gridlines": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Histogram.js": {
            "name": "tests/input/charts/Histogram.js",
            "modules": {},
            "classes": {
                "Histogram": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/LeftAxisLayout.js": {
            "name": "tests/input/charts/LeftAxisLayout.js",
            "modules": {},
            "classes": {
                "LeftAxisLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/LineSeries.js": {
            "name": "tests/input/charts/LineSeries.js",
            "modules": {},
            "classes": {
                "LineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Lines.js": {
            "name": "tests/input/charts/Lines.js",
            "modules": {},
            "classes": {
                "Lines": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/MarkerSeries.js": {
            "name": "tests/input/charts/MarkerSeries.js",
            "modules": {},
            "classes": {
                "MarkerSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/NumericAxis.js": {
            "name": "tests/input/charts/NumericAxis.js",
            "modules": {},
            "classes": {
                "NumericAxis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/PieChart.js": {
            "name": "tests/input/charts/PieChart.js",
            "modules": {},
            "classes": {
                "PieChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/PieChartLegend.js": {
            "name": "tests/input/charts/PieChartLegend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/PieSeries.js": {
            "name": "tests/input/charts/PieSeries.js",
            "modules": {},
            "classes": {
                "PieSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Plots.js": {
            "name": "tests/input/charts/Plots.js",
            "modules": {},
            "classes": {
                "Plots": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/RectGroup.js": {
            "name": "tests/input/charts/RectGroup.js",
            "modules": {},
            "classes": {
                "GroupRect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/Renderer.js": {
            "name": "tests/input/charts/Renderer.js",
            "modules": {},
            "classes": {
                "Renderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/RightAxisLayout.js": {
            "name": "tests/input/charts/RightAxisLayout.js",
            "modules": {},
            "classes": {
                "RightAxisLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/ShapeGroup.js": {
            "name": "tests/input/charts/ShapeGroup.js",
            "modules": {
                "charts": 1,
                "graphics": 1
            },
            "classes": {
                "ShapeGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/SplineSeries.js": {
            "name": "tests/input/charts/SplineSeries.js",
            "modules": {},
            "classes": {
                "SplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedAreaSeries.js": {
            "name": "tests/input/charts/StackedAreaSeries.js",
            "modules": {},
            "classes": {
                "StackedAreaSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedAreaSplineSeries.js": {
            "name": "tests/input/charts/StackedAreaSplineSeries.js",
            "modules": {},
            "classes": {
                "StackedAreaSplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedAxis.js": {
            "name": "tests/input/charts/StackedAxis.js",
            "modules": {},
            "classes": {
                "StackedAxis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedBarSeries.js": {
            "name": "tests/input/charts/StackedBarSeries.js",
            "modules": {},
            "classes": {
                "StackedBarSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedColumnSeries.js": {
            "name": "tests/input/charts/StackedColumnSeries.js",
            "modules": {},
            "classes": {
                "StackedColumnSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedComboSeries.js": {
            "name": "tests/input/charts/StackedComboSeries.js",
            "modules": {},
            "classes": {
                "StackedComboSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedComboSplineSeries.js": {
            "name": "tests/input/charts/StackedComboSplineSeries.js",
            "modules": {},
            "classes": {
                "StackedComboSplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedLineSeries.js": {
            "name": "tests/input/charts/StackedLineSeries.js",
            "modules": {},
            "classes": {
                "StackedLineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedMarkerSeries.js": {
            "name": "tests/input/charts/StackedMarkerSeries.js",
            "modules": {},
            "classes": {
                "StackedMarkerSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackedSplineSeries.js": {
            "name": "tests/input/charts/StackedSplineSeries.js",
            "modules": {},
            "classes": {
                "StackedSplineSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/StackingUtil.js": {
            "name": "tests/input/charts/StackingUtil.js",
            "modules": {},
            "classes": {
                "StackingUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/TimeAxis.js": {
            "name": "tests/input/charts/TimeAxis.js",
            "modules": {},
            "classes": {
                "TimeAxis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/charts/TopAxisLayout.js": {
            "name": "tests/input/charts/TopAxisLayout.js",
            "modules": {},
            "classes": {
                "TopAxisLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/inherit/examplemodule.js": {
            "name": "tests/input/inherit/examplemodule.js",
            "modules": {
                "ExampleModule": 1
            },
            "classes": {
                "mywidget.SuperWidget": 1,
                "mywidget.SubWidget": 1,
                "mywidget.SubWidget2": 1
            },
            "fors": {},
            "namespaces": {
                "mywidget": 1
            }
        },
        "tests/input/json/parse.js": {
            "name": "tests/input/json/parse.js",
            "modules": {
                "json": 1,
                "json-parse": 1
            },
            "classes": {
                "JSON": 1
            },
            "fors": {
                "JSON": 1
            },
            "namespaces": {}
        },
        "tests/input/json/stringify.js": {
            "name": "tests/input/json/stringify.js",
            "modules": {
                "json-stringify": 1
            },
            "classes": {},
            "fors": {
                "JSON": 1
            },
            "namespaces": {}
        },
        "tests/input/namespace/ns.js": {
            "name": "tests/input/namespace/ns.js",
            "modules": {
                "foobar": 1
            },
            "classes": {
                "Foo.Bar": 1
            },
            "fors": {},
            "namespaces": {
                "Foo": 1,
                "Foo.Bar": 1
            }
        },
        "tests/input/preprocessor/preprocessortest.js": {
            "name": "tests/input/preprocessor/preprocessortest.js",
            "modules": {},
            "classes": {
                "Foo.Bar.TestPreprocessor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/test/anim.js": {
            "name": "tests/input/test/anim.js",
            "modules": {
                "anim": 1
            },
            "classes": {
                "Anim": 1,
                "Easing": 1,
                "EasingFoo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/test/test.js": {
            "name": "tests/input/test/test.js",
            "modules": {
                "mymodule": 1,
                "mysubmodule": 1
            },
            "classes": {
                "myclass": 1,
                "OtherClass": 1,
                "OtherClass2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/test2/dump/dump.js": {
            "name": "tests/input/test2/dump/dump.js",
            "modules": {
                "dump": 1
            },
            "classes": {
                "YUI~dump": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/test2/oop/oop.js": {
            "name": "tests/input/test2/oop/oop.js",
            "modules": {
                "oop": 1
            },
            "classes": {
                "YUI~oop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "tests/input/test2/namespace.js": {
            "name": "tests/input/test2/namespace.js",
            "modules": {
                "P.storage": 1
            },
            "classes": {
                "P.storage.Store": 1,
                "P.storage.LocalStore": 1,
                "P.storage": 1
            },
            "fors": {},
            "namespaces": {
                "P.storage": 1,
                "P": 1
            }
        },
        "tests/input/test2/slashes.js": {
            "name": "tests/input/test2/slashes.js",
            "modules": {
                "myapp/views/index": 1
            },
            "classes": {
                "Main": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "yuidoc": {
            "name": "yuidoc",
            "submodules": {},
            "classes": {
                "DocBuilder": 1,
                "CLI": 1,
                "DocParser": 1,
                "DocView": 1,
                "Files": 1,
                "Help": 1,
                "Options": 1,
                "Server": 1,
                "Utils": 1,
                "YUIDoc": 1
            },
            "fors": {
                "DocParser": 1,
                "YUIDoc": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "lib/yuidoc.js",
            "line": 49,
            "description": "This is the __module__ description for the `YUIDoc` module.\n\n    var options = {\n        paths: [ './lib' ],\n        outdir: './out'\n    };\n\n    var Y = require('yuidocjs');\n    var json = (new Y.YUIDoc(options)).run();",
            "itemtype": "main"
        },
        "charts": {
            "name": "charts",
            "submodules": {
                "charts-legend": 1
            },
            "classes": {
                "AreaSeries": 1,
                "AreaSplineSeries": 1,
                "Axis": 1,
                "AxisType": 1,
                "BarSeries": 1,
                "BottomAxisLayout": 1,
                "CartesianChart": 1,
                "HorizontalLegendLayout": 1,
                "VerticalLegendLayout": 1,
                "CartesianSeries": 1,
                "CategoryAxis": 1,
                "Chart": 1,
                "ChartBase": 1,
                "ChartLegend": 1,
                "ColumnSeries": 1,
                "ComboSeries": 1,
                "ComboSplineSeries": 1,
                "CurveUtil": 1,
                "Fills": 1,
                "Graph": 1,
                "Gridlines": 1,
                "Histogram": 1,
                "LeftAxisLayout": 1,
                "LineSeries": 1,
                "Lines": 1,
                "MarkerSeries": 1,
                "NumericAxis": 1,
                "PieChart": 1,
                "PieSeries": 1,
                "Plots": 1,
                "Renderer": 1,
                "RightAxisLayout": 1,
                "SplineSeries": 1,
                "StackedAreaSeries": 1,
                "StackedAreaSplineSeries": 1,
                "StackedAxis": 1,
                "StackedBarSeries": 1,
                "StackedColumnSeries": 1,
                "StackedComboSeries": 1,
                "StackedComboSplineSeries": 1,
                "StackedLineSeries": 1,
                "StackedMarkerSeries": 1,
                "StackedSplineSeries": 1,
                "StackingUtil": 1,
                "TimeAxis": 1,
                "TopAxisLayout": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 1,
            "description": "The Charts widget provides an api for displaying data\ngraphically.",
            "extends": "CartesianSeries",
            "uses": [
                "Fills"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "(optional) Configuration parameters for the Chart.",
                    "type": "Object"
                }
            ],
            "itemtype": "main"
        },
        "charts-legend": {
            "name": "charts-legend",
            "submodules": {},
            "classes": {
                "HorizontalLegendLayout": 1,
                "VerticalLegendLayout": 1,
                "ChartLegend": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "charts",
            "namespace": "",
            "file": "tests/input/charts/ChartLegend.js",
            "line": 1,
            "description": "Adds legend functionality to charts."
        },
        "graphics": {
            "name": "graphics",
            "submodules": {},
            "classes": {
                "GroupCircle": 1,
                "GroupDiamond": 1,
                "EllipseGroup": 1,
                "GroupRect": 1,
                "ShapeGroup": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/charts/ShapeGroup.js",
            "line": 25,
            "description": "Abstract class for creating groups of shapes with the same styles and dimensions.",
            "is_constructor": 1
        },
        "ExampleModule": {
            "name": "ExampleModule",
            "submodules": {},
            "classes": {
                "mywidget.SuperWidget": 1,
                "mywidget.SubWidget": 1,
                "mywidget.SubWidget2": 1
            },
            "fors": {},
            "namespaces": {
                "mywidget": 1
            },
            "tag": "module",
            "file": "tests/input/inherit/examplemodule.js",
            "line": 113,
            "description": "This is my example module",
            "example": [
                "\n\n    var bar;\n"
            ]
        },
        "json": {
            "name": "json",
            "submodules": {
                "json-parse": 1,
                "json-stringify": 1
            },
            "classes": {
                "JSON": 1
            },
            "fors": {
                "JSON": 1
            },
            "namespaces": {
                "Foo": 1
            },
            "tag": "main",
            "file": "tests/input/json/parse.js",
            "line": 1,
            "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>",
            "itemtype": "main"
        },
        "json-parse": {
            "name": "json-parse",
            "submodules": {},
            "classes": {
                "JSON": 1
            },
            "fors": {
                "JSON": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "json",
            "namespace": "",
            "file": "tests/input/json/parse.js",
            "line": 1,
            "description": "Provides Y.JSON.parse method to accept JSON strings and return native\nJavaScript objects.",
            "static": 1
        },
        "json-stringify": {
            "name": "json-stringify",
            "submodules": {},
            "classes": {},
            "fors": {
                "JSON": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "json",
            "namespace": "",
            "file": "tests/input/json/stringify.js",
            "line": 1,
            "description": "Provides Y.JSON.stringify method for converting objects to JSON strings.",
            "static": 1
        },
        "foobar": {
            "name": "foobar",
            "submodules": {},
            "classes": {
                "Foo.Bar": 1,
                "Foo.Bar.TestPreprocessor": 1
            },
            "fors": {},
            "namespaces": {
                "Foo.Bar": 1
            },
            "tag": "main",
            "file": "tests/input/preprocessor/preprocessortest.js",
            "line": 1,
            "description": "Test Class",
            "itemtype": "main"
        },
        "anim": {
            "name": "anim",
            "submodules": {
                "anim-easing": 1,
                "anim-easing-foo": 1
            },
            "classes": {
                "Anim": 1,
                "Easing": 1,
                "EasingFoo": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/test/anim.js",
            "line": 20,
            "description": "This is the Anim MODULE description",
            "itemtype": "main"
        },
        "anim-easing": {
            "name": "anim-easing",
            "submodules": {},
            "classes": {
                "Easing": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "anim",
            "namespace": "",
            "description": "The easing module provides methods for customizing\nhow an animation behaves during each run.",
            "file": "tests/input/test/anim.js",
            "line": 12
        },
        "anim-easing-foo": {
            "name": "anim-easing-foo",
            "submodules": {},
            "classes": {
                "EasingFoo": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "anim",
            "namespace": "",
            "description": "FOO FOO FOO FOO FOO The easing module provides methods for customizing",
            "file": "tests/input/test/anim.js",
            "line": 20
        },
        "mymodule": {
            "name": "mymodule",
            "submodules": {
                "mysubmodule": 1
            },
            "classes": {
                "myclass": 1,
                "OtherClass": 1,
                "OtherClass2": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/test/test.js",
            "line": 174,
            "description": "The module",
            "category": [
                "one",
                "two",
                "three"
            ],
            "requires": [
                "one",
                "two"
            ],
            "uses": [
                "three",
                "four"
            ]
        },
        "mysubmodule": {
            "name": "mysubmodule",
            "submodules": {},
            "classes": {
                "myclass": 1,
                "OtherClass": 1,
                "OtherClass2": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "mymodule",
            "namespace": "",
            "file": "tests/input/test/test.js",
            "line": 174,
            "description": "The submodule",
            "category": [
                "three",
                "four"
            ]
        },
        "dump": {
            "name": "dump",
            "submodules": {},
            "classes": {
                "YUI~dump": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/test2/dump/dump.js",
            "line": 18,
            "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\n\nIf included, the dump method is added to the YUI instance."
        },
        "oop": {
            "name": "oop",
            "submodules": {},
            "classes": {
                "YUI~oop": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/test2/oop/oop.js",
            "line": 9,
            "description": "Supplies object inheritance and manipulation utilities.  This adds\nadditional functionaity to what is provided in yui-base, and the\nmethods are applied directly to the YUI instance.  This module\nis required for most YUI components."
        },
        "P.storage": {
            "name": "P.storage",
            "submodules": {},
            "classes": {
                "P.storage.Store": 1,
                "P.storage.LocalStore": 1,
                "P.storage": 1
            },
            "fors": {},
            "namespaces": {
                "P.storage": 1,
                "P": 1
            },
            "tag": "module",
            "file": "tests/input/test2/namespace.js",
            "line": 20
        },
        "myapp/views/index": {
            "name": "myapp/views/index",
            "submodules": {},
            "classes": {
                "Main": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "tests/input/test2/slashes.js",
            "line": 6,
            "description": "This is a module with slashes in the name"
        }
    },
    "classes": {
        "DocBuilder": {
            "name": "DocBuilder",
            "shortname": "DocBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "is_enum": false,
            "file": "lib/builder.js",
            "line": 13,
            "description": "Takes the `JSON` data from the `DocParser` class, creates and parses markdown and handlebars\nbased templates to generate static HTML content"
        },
        "CLI": {
            "name": "CLI",
            "shortname": "CLI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/cli.js",
            "line": 9,
            "description": "Parses the arguments, creates the options and passes them to `Y.YUIDoc` and then `Y.DocBuilder`."
        },
        "DocParser": {
            "name": "DocParser",
            "shortname": "DocParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/docparser.js",
            "line": 812,
            "description": "The doc parser accepts a **map** of files to file content.\nOnce `parse()` is called, various properties will be populated\nwith the parsers data (aggregated in the `'data'` property).",
            "extends": "Base",
            "is_constructor": 1,
            "params": [
                {
                    "name": "o",
                    "description": "the config object",
                    "type": "Object"
                }
            ]
        },
        "DocView": {
            "name": "DocView",
            "shortname": "DocView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/docview.js",
            "line": 15,
            "description": "View class borrowed from [Selleck](https://github.com/rgrove/selleck)  \nThe view class is a **`handlebars`** template helper.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Meta data to use in this template",
                    "type": "Object"
                },
                {
                    "name": "templateName",
                    "description": "The name of the template file to render.",
                    "type": "String"
                }
            ]
        },
        "Files": {
            "name": "Files",
            "shortname": "Files",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/files.js",
            "line": 8,
            "description": "Ported fileutils methods from [Selleck](http://github.com/rgrove/selleck)"
        },
        "Help": {
            "name": "Help",
            "shortname": "Help",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/help.js",
            "line": 8,
            "description": "Shows the help text"
        },
        "Main": {
            "name": "Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "myapp/views/index",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test2/slashes.js",
            "line": 6,
            "description": "This is the main class",
            "exports": "{YUI} Y A YUI instance",
            "is_constructor": 1
        },
        "Options": {
            "name": "Options",
            "shortname": "Options",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/options.js",
            "line": 14,
            "description": "Handles argument parsing"
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/server.js",
            "line": 9,
            "description": "Provides the `--server` server option for YUIDoc"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/utils.js",
            "line": 11,
            "description": "Utilities Class"
        },
        "YUIDoc": {
            "name": "YUIDoc",
            "shortname": "YUIDoc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "is_enum": false,
            "file": "lib/yuidoc.js",
            "line": 49,
            "description": "YUIDoc main class\n\n     var options = {\n         paths: [ './lib' ],\n         outdir: './out'\n     };\n\n     var Y = require('yuidoc');\n     var json = (new Y.YUIDoc(options)).run();",
            "mainName": "yuidoc",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "The config object"
                }
            ]
        },
        "AreaSeries": {
            "name": "AreaSeries",
            "shortname": "AreaSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/AreaSeries.js",
            "line": 1,
            "description": "The AreaSeries class renders quantitative data on a graph by creating a fill between 0\nand the relevant data points."
        },
        "AreaSplineSeries": {
            "name": "AreaSplineSeries",
            "shortname": "AreaSplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/AreaSplineSeries.js",
            "line": 1,
            "description": "AreaSplineSeries renders an area graph with data points connected by a curve."
        },
        "Axis": {
            "name": "Axis",
            "shortname": "Axis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Axis.js",
            "line": 1,
            "description": "The Axis class. Generates axes for a chart."
        },
        "AxisType": {
            "name": "AxisType",
            "shortname": "AxisType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/AxisType.js",
            "line": 1,
            "description": "AxisType is an abstract class that manages the data for an axis."
        },
        "BarSeries": {
            "name": "BarSeries",
            "shortname": "BarSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/BarSeries.js",
            "line": 1,
            "description": "The BarSeries class renders bars positioned vertically along a category or time axis. The bars'\nlengths are proportional to the values they represent along a horizontal axis.\nand the relevant data points."
        },
        "BottomAxisLayout": {
            "name": "BottomAxisLayout",
            "shortname": "BottomAxisLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 1,
            "description": "Contains algorithms for rendering a bottom axis."
        },
        "CartesianChart": {
            "name": "CartesianChart",
            "shortname": "CartesianChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1,
            "description": "The CartesianChart class creates a chart with horizontal and vertical axes."
        },
        "HorizontalLegendLayout": {
            "name": "HorizontalLegendLayout",
            "shortname": "HorizontalLegendLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "submodule": "charts-legend",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 48,
            "description": "Contains methods for displaying items horizontally in a legend."
        },
        "VerticalLegendLayout": {
            "name": "VerticalLegendLayout",
            "shortname": "VerticalLegendLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "submodule": "charts-legend",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 207,
            "description": "Contains methods for displaying items vertically in a legend."
        },
        "CartesianSeries": {
            "name": "CartesianSeries",
            "shortname": "CartesianSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 1,
            "description": "The CartesianSeries class creates a chart with horizontal and vertical axes."
        },
        "CategoryAxis": {
            "name": "CategoryAxis",
            "shortname": "CategoryAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 1,
            "description": "CategoryAxis manages category data on an axis."
        },
        "Chart": {
            "name": "Chart",
            "shortname": "Chart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Chart.js",
            "line": 1,
            "description": "The Chart class is the basic application used to create a chart."
        },
        "ChartBase": {
            "name": "ChartBase",
            "shortname": "ChartBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ChartBase.js",
            "line": 1,
            "description": "The ChartBase class is an abstract class used to create charts."
        },
        "ChartLegend": {
            "name": "ChartLegend",
            "shortname": "ChartLegend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ChartLegend.js",
            "line": 1,
            "description": "ChartLegend provides a legend for a chart.",
            "submodule": "charts-legend",
            "extends": "Widget"
        },
        "GroupCircle": {
            "name": "GroupCircle",
            "shortname": "GroupCircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CircleGroup.js",
            "line": 1,
            "description": "Abstract class for creating groups of circles with the same styles and dimensions."
        },
        "ColumnSeries": {
            "name": "ColumnSeries",
            "shortname": "ColumnSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ColumnSeries.js",
            "line": 1,
            "description": "The ColumnSeries class renders columns positioned horizontally along a category or time axis. The columns'\nlengths are proportional to the values they represent along a vertical axis.\nand the relevant data points."
        },
        "ComboSeries": {
            "name": "ComboSeries",
            "shortname": "ComboSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ComboSeries.js",
            "line": 1,
            "description": "The ComboSeries class renders a combination of lines, plots and area fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, lines and plots \nare rendered and area is not."
        },
        "ComboSplineSeries": {
            "name": "ComboSplineSeries",
            "shortname": "ComboSplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ComboSplineSeries.js",
            "line": 1,
            "description": "The ComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, splines and plots \nare rendered and areaspline is not."
        },
        "CurveUtil": {
            "name": "CurveUtil",
            "shortname": "CurveUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/CurveUtil.js",
            "line": 1,
            "description": "Utility class used for calculating curve points."
        },
        "GroupDiamond": {
            "name": "GroupDiamond",
            "shortname": "GroupDiamond",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/DiamondGroup.js",
            "line": 1,
            "description": "Abstract class for creating groups of diamonds with the same styles and dimensions."
        },
        "EllipseGroup": {
            "name": "EllipseGroup",
            "shortname": "EllipseGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/EllipseGroup.js",
            "line": 1,
            "description": "Abstract class for creating groups of diamonds with the same styles and dimensions."
        },
        "Fills": {
            "name": "Fills",
            "shortname": "Fills",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Fills.js",
            "line": 1,
            "description": "Utility class used for drawing area fills."
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Graph.js",
            "line": 1,
            "description": "Graph manages and contains series instances for a `CartesianChart`\ninstance."
        },
        "Gridlines": {
            "name": "Gridlines",
            "shortname": "Gridlines",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Gridlines.js",
            "line": 1,
            "description": "Gridlines draws gridlines on a Graph."
        },
        "Histogram": {
            "name": "Histogram",
            "shortname": "Histogram",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Histogram.js",
            "line": 1,
            "description": "Histogram is the base class for Column and Bar series."
        },
        "LeftAxisLayout": {
            "name": "LeftAxisLayout",
            "shortname": "LeftAxisLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 1,
            "description": "Algorithmic strategy for rendering a left axis."
        },
        "LineSeries": {
            "name": "LineSeries",
            "shortname": "LineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/LineSeries.js",
            "line": 1,
            "description": "The LineSeries class renders quantitative data on a graph by connecting relevant data points."
        },
        "Lines": {
            "name": "Lines",
            "shortname": "Lines",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Lines.js",
            "line": 1,
            "description": "Utility class used for drawing lines."
        },
        "MarkerSeries": {
            "name": "MarkerSeries",
            "shortname": "MarkerSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 1,
            "description": "The MarkerSeries class renders quantitative data by plotting relevant data points \non a graph."
        },
        "NumericAxis": {
            "name": "NumericAxis",
            "shortname": "NumericAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/NumericAxis.js",
            "line": 1,
            "description": "NumericAxis manages numeric data on an axis."
        },
        "PieChart": {
            "name": "PieChart",
            "shortname": "PieChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/PieChart.js",
            "line": 1,
            "description": "The PieChart class creates a pie chart"
        },
        "PieSeries": {
            "name": "PieSeries",
            "shortname": "PieSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/PieSeries.js",
            "line": 1,
            "description": "PieSeries visualizes data as a circular chart divided into wedges which represent data as a \npercentage of a whole."
        },
        "Plots": {
            "name": "Plots",
            "shortname": "Plots",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Plots.js",
            "line": 1,
            "description": "Utility class used for drawing markers."
        },
        "GroupRect": {
            "name": "GroupRect",
            "shortname": "GroupRect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/RectGroup.js",
            "line": 1,
            "description": "Abstract class for creating groups of rects with the same styles and dimensions."
        },
        "Renderer": {
            "name": "Renderer",
            "shortname": "Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/Renderer.js",
            "line": 1,
            "description": "The Renderer class is a base class for chart components that use the `styles`\nattribute."
        },
        "RightAxisLayout": {
            "name": "RightAxisLayout",
            "shortname": "RightAxisLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 1,
            "description": "RightAxisLayout contains algorithms for rendering a right axis."
        },
        "ShapeGroup": {
            "name": "ShapeGroup",
            "shortname": "ShapeGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "graphics",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/ShapeGroup.js",
            "line": 25,
            "description": "Abstract class for creating groups of shapes with the same styles and dimensions."
        },
        "SplineSeries": {
            "name": "SplineSeries",
            "shortname": "SplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/SplineSeries.js",
            "line": 1,
            "description": "SplineSeries renders a graph with data points connected by a curve."
        },
        "StackedAreaSeries": {
            "name": "StackedAreaSeries",
            "shortname": "StackedAreaSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedAreaSeries.js",
            "line": 1,
            "description": "StackedAreaSeries area fills to display data showing its contribution to a whole."
        },
        "StackedAreaSplineSeries": {
            "name": "StackedAreaSplineSeries",
            "shortname": "StackedAreaSplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedAreaSplineSeries.js",
            "line": 1,
            "description": "StackedAreaSplineSeries creates a stacked area chart with points data points connected by a curve."
        },
        "StackedAxis": {
            "name": "StackedAxis",
            "shortname": "StackedAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedAxis.js",
            "line": 1,
            "description": "StackedAxis manages stacked numeric data on an axis."
        },
        "StackedBarSeries": {
            "name": "StackedBarSeries",
            "shortname": "StackedBarSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 1,
            "description": "The StackedBarSeries renders bar chart in which series are stacked horizontally to show\ntheir contribution to the cumulative total."
        },
        "StackedColumnSeries": {
            "name": "StackedColumnSeries",
            "shortname": "StackedColumnSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 1,
            "description": "The StackedColumnSeries renders column chart in which series are stacked vertically to show\ntheir contribution to the cumulative total."
        },
        "StackedComboSeries": {
            "name": "StackedComboSeries",
            "shortname": "StackedComboSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedComboSeries.js",
            "line": 1,
            "description": "The StackedComboSeries class renders a combination of lines, plots and area fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."
        },
        "StackedComboSplineSeries": {
            "name": "StackedComboSplineSeries",
            "shortname": "StackedComboSplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedComboSplineSeries.js",
            "line": 1,
            "description": "The StackedComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Series\nare stacked along the value axis to indicate each series contribution to a cumulative total. Each\nseries type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\nrendered."
        },
        "StackedLineSeries": {
            "name": "StackedLineSeries",
            "shortname": "StackedLineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedLineSeries.js",
            "line": 1,
            "description": "StackedLineSeries creates line graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."
        },
        "StackedMarkerSeries": {
            "name": "StackedMarkerSeries",
            "shortname": "StackedMarkerSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedMarkerSeries.js",
            "line": 1,
            "description": "StackedMarkerSeries plots markers with different series stacked along the value axis to indicate each\nseries' contribution to a cumulative total."
        },
        "StackedSplineSeries": {
            "name": "StackedSplineSeries",
            "shortname": "StackedSplineSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackedSplineSeries.js",
            "line": 1,
            "description": "StackedSplineSeries creates spline graphs in which the different series are stacked along a value axis\nto indicate their contribution to a cumulative total."
        },
        "StackingUtil": {
            "name": "StackingUtil",
            "shortname": "StackingUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/StackingUtil.js",
            "line": 1,
            "description": "Utility class used for creating stacked series."
        },
        "TimeAxis": {
            "name": "TimeAxis",
            "shortname": "TimeAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/TimeAxis.js",
            "line": 1,
            "description": "TimeAxis manages time data on an axis."
        },
        "TopAxisLayout": {
            "name": "TopAxisLayout",
            "shortname": "TopAxisLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "charts",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 1,
            "description": "Contains algorithms for rendering a top axis."
        },
        "mywidget.SuperWidget": {
            "name": "mywidget.SuperWidget",
            "shortname": "mywidget.SuperWidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ExampleModule",
            "namespace": "mywidget",
            "is_enum": false,
            "file": "tests/input/inherit/examplemodule.js",
            "line": 13,
            "description": "<b>Superclass</b> description.<br>This is a second line too.",
            "is_constructor": 1,
            "extends": "Widget",
            "example": [
                "\n\n    var bar;\n"
            ]
        },
        "mywidget.SubWidget": {
            "name": "mywidget.SubWidget",
            "shortname": "mywidget.SubWidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ExampleModule",
            "namespace": "mywidget",
            "is_enum": false,
            "file": "tests/input/inherit/examplemodule.js",
            "line": 91,
            "description": "Subclass description.",
            "is_constructor": 1,
            "extends": "mywidget.SuperWidget"
        },
        "mywidget.SubWidget2": {
            "name": "mywidget.SubWidget2",
            "shortname": "mywidget.SubWidget2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ExampleModule",
            "namespace": "mywidget",
            "is_enum": false,
            "file": "tests/input/inherit/examplemodule.js",
            "line": 113,
            "description": "Subclass description.",
            "is_constructor": 1,
            "extends": "Accordion"
        },
        "JSON": {
            "name": "JSON",
            "shortname": "JSON",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "json",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/json/parse.js",
            "line": 1,
            "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>",
            "mainName": "json",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "submodule": "json-parse"
        },
        "Foo.Bar": {
            "name": "Foo.Bar",
            "shortname": "Foo.Bar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "foobar",
            "namespace": "Foo.Bar",
            "is_enum": false,
            "file": "tests/input/namespace/ns.js",
            "line": 1,
            "description": "Test Class",
            "mainName": "foobar",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Foo.Bar.TestPreprocessor": {
            "name": "Foo.Bar.TestPreprocessor",
            "shortname": "TestPreprocessor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "foobar",
            "namespace": "Foo.Bar",
            "is_enum": false,
            "file": "tests/input/preprocessor/preprocessortest.js",
            "line": 1,
            "description": "This class is for testing the preprocessor option.",
            "customtag": "hello"
        },
        "Anim": {
            "name": "Anim",
            "shortname": "Anim",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "anim",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/anim.js",
            "line": 7,
            "description": "This is the Anim Class description"
        },
        "Easing": {
            "name": "Easing",
            "shortname": "Easing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "anim",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/anim.js",
            "line": 12,
            "description": "The easing module provides methods for customizing\nhow an animation behaves during each run.",
            "submodule": "anim-easing"
        },
        "EasingFoo": {
            "name": "EasingFoo",
            "shortname": "EasingFoo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "anim",
            "submodule": "anim-easing-foo",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/anim.js",
            "line": 20,
            "description": "FOO FOO FOO FOO FOO The easing module provides methods for customizing"
        },
        "myclass": {
            "name": "myclass",
            "shortname": "myclass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mymodule",
            "submodule": "mysubmodule",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/test.js",
            "line": 32,
            "description": "The class def",
            "is_constructor": 1
        },
        "OtherClass": {
            "name": "OtherClass",
            "shortname": "OtherClass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "myclass"
            ],
            "module": "mymodule",
            "submodule": "mysubmodule",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/test.js",
            "line": 168,
            "description": "Other Class"
        },
        "OtherClass2": {
            "name": "OtherClass2",
            "shortname": "OtherClass2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "myclass"
            ],
            "module": "mymodule",
            "submodule": "mysubmodule",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test/test.js",
            "line": 174,
            "description": "Other Class 2"
        },
        "YUI~dump": {
            "name": "YUI~dump",
            "shortname": "YUI~dump",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dump",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test2/dump/dump.js",
            "line": 18,
            "description": "The following methods are added to the YUI instance"
        },
        "YUI~oop": {
            "name": "YUI~oop",
            "shortname": "YUI~oop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "oop",
            "namespace": "",
            "is_enum": false,
            "file": "tests/input/test2/oop/oop.js",
            "line": 9,
            "description": "The following methods are added to the YUI instance"
        },
        "P.storage.Store": {
            "name": "P.storage.Store",
            "shortname": "P.storage.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "P.storage",
            "namespace": "P.storage",
            "is_enum": false,
            "file": "tests/input/test2/namespace.js",
            "line": 5,
            "is_constructor": 1
        },
        "P.storage.LocalStore": {
            "name": "P.storage.LocalStore",
            "shortname": "P.storage.LocalStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "P.storage",
            "namespace": "P.storage",
            "is_enum": false,
            "file": "tests/input/test2/namespace.js",
            "line": 12,
            "is_constructor": 1,
            "extends": "P.storage.Store"
        },
        "P.storage": {
            "name": "P.storage",
            "shortname": "P.storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "P.storage",
            "namespace": "P",
            "is_enum": false,
            "file": "tests/input/test2/namespace.js",
            "line": 20
        }
    },
    "classitems": [
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 19,
            "fileoverview": "some functions for browser-side pretty printing of code contained in html.\n\n<p>\nFor a fairly comprehensive set of languages see the\n<a href=\"http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs\">README</a>\nfile that came with this source.  At a minimum, the lexer should work on a\nnumber of languages including C and friends, Java, Python, Bash, SQL, HTML,\nXML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\nand a subset of Perl, but, because of commenting conventions, doesn't work on\nSmalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n<p>\nUsage: <ol>\n<li> include this source file in an html page via\n  {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n<li> define style rules.  See the example page for examples.\n<li> mark the {@code <pre>} and {@code <code>} tags in your source with\n   {@code class=prettyprint.}\n   You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n   printer needs to do more substantial DOM manipulations to support that, so\n   some css styles may not be preserved.\n</ol>\nThat's it.  I wanted to keep the API as simple as possible, so there's no\nneed to specify which language the code is in, but if you wish, you can add\nanother class to the {@code <pre>} or {@code <code>} element to specify the\nlanguage, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\nstarts with \"lang-\" followed by a file extension, specifies the file type.\nSee the \"lang-*.js\" files in this directory for code that implements\nper-language file handlers.\n<p>\nChange log:<br>\ncbeust, 2006/08/22\n<blockquote>\n  Java annotations (start with \"@\") are now captured as literals (\"lit\")\n</blockquote>",
            "requires": [
                "console"
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 61,
            "description": "Split {@code prettyPrint} into multiple timeouts so as not to interfere with\nUI events.\nIf set to {@code false}, {@code prettyPrint()} is synchronous.",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 68,
            "description": "Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n{@code class=prettyprint} and prettify them.",
            "params": [
                {
                    "name": "opt_whenDone",
                    "description": "if specified, called when the last entry\n    has been finished.",
                    "type": "Function?"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 76,
            "description": "Pretty print a chunk of code.",
            "params": [
                {
                    "name": "sourceCodeHtml",
                    "description": "code as html",
                    "type": "String"
                }
            ],
            "return": {
                "description": "code as html, but prettier",
                "type": "String"
            },
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 136,
            "description": "token style for a string literal",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 141,
            "description": "token style for a keyword",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 146,
            "description": "token style for a comment",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 151,
            "description": "token style for a type",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 156,
            "description": "token style for a literal value.  e.g. 1, null, true.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 161,
            "description": "token style for a punctuation string.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 166,
            "description": "token style for plain text.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 172,
            "description": "token style for an sgml tag.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 177,
            "description": "token style for a markup declaration such as a DOCTYPE.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 182,
            "description": "token style for embedded source.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 187,
            "description": "token style for an sgml attribute name.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 192,
            "description": "token style for an sgml attribute value.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 198,
            "description": "A class that indicates a section of markup that is not code, e.g. to allow\nembedding of line numbers within code listings.",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 207,
            "description": "A set of tokens that can precede a regular expression literal in\njavascript\nhttp://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\nhas the full list, but I've removed ones that might be problematic when\nseen in languages that don't support regular expression literals.\n\n<p>Specifically, I've removed any keywords that can't precede a regexp\nliteral in a syntactically legal javascript program, and I've removed the\n\"in\" keyword since it's not a keyword in many languages, and might be used\nas a count of inches.\n\n<p>The link above does not accurately describe EcmaScript rules since\nit fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\nvery well in practice.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 235,
            "description": "Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\nmatches the union of the sets of strings matched by the input RegExp.\nSince it matches globally, if the input strings have a start-of-input\nanchor (/^.../), it is ignored for the purposes of unioning.",
            "params": [
                {
                    "name": "regexs",
                    "description": "non multiline, non-global regexs.",
                    "type": "Array.<RegExp>"
                }
            ],
            "return": {
                "description": "a global regex.",
                "type": "RegExp"
            },
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 477,
            "description": "Split markup into a string of source code and an array mapping ranges in\nthat string to the text nodes in which they appear.\n\n<p>\nThe HTML DOM structure:</p>\n<pre>\n(Element   \"p\"\n  (Element \"b\"\n    (Text  \"print \"))       ; #1\n  (Text    \"'Hello '\")      ; #2\n  (Element \"br\")            ; #3\n  (Text    \"  + 'World';\")) ; #4\n</pre>\n<p>\ncorresponds to the HTML\n{@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n\n<p>\nIt will produce the output:</p>\n<pre>\n{\n  sourceCode: \"print 'Hello '\\n  + 'World';\",\n  //                     1          2\n  //           012345678901234 5678901234567\n  spans: [0, #1, 6, #2, 14, #3, 15, #4]\n}\n</pre>\n<p>\nwhere #1 is a reference to the {@code \"print \"} text node above, and so\non for the other text nodes.\n</p>\n\n<p>\nThe {@code} spans array is an array of pairs.  Even elements are the start\nindices of substrings, and odd elements are the text nodes (or BR elements)\nthat contain the text for those substrings.\nSubstrings continue until the next index or the end of the source.\n</p>",
            "params": [
                {
                    "name": "node",
                    "description": "an HTML DOM subtree containing source-code.",
                    "type": "Node"
                },
                {
                    "name": "isPreformatted",
                    "description": "true if white-space in text nodes should\n   be considered significant.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "source code and the text nodes in which they occur.",
                "type": "Object"
            },
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 571,
            "description": "Apply the given language handler to sourceCode and add the resulting\ndecorations to out.",
            "params": [
                {
                    "name": "basePos",
                    "description": "the index of sourceCode within the chunk of source\n   whose decorations are already present on out.",
                    "type": "Number"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 589,
            "description": "Given an element, if it contains only one child element and any text nodes\nit contains contain only space characters, return the sole child element.\nOtherwise returns undefined.\n<p>\nThis is meant to return the CODE element in {@code <pre><code ...>} when\nthere is a single child element that contains all the non-space textual\ncontent, but not to return anything where there are multiple child elements\nas in {@code <pre><code>...</code><code>...</code></pre>} or when there\nis textual content.",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 613,
            "description": "The lexing function interprets the patterns to find token boundaries and\nreturns a decoration list of the form\n[index_0, style_0, index_1, style_1, ..., index_n, style_n]\nwhere index_n is an index into the sourceCode, and style_n is a style\nconstant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\nall characters in sourceCode[index_n-1:index_n].\n\nThe stylePatterns is a list whose elements have the form\n[style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n\nStyle is a style constant like PR_PLAIN, or can be a string of the\nform 'lang-FOO', where FOO is a language extension describing the\nlanguage of the portion of the token in $1 after pattern executes.\nE.g., if style is 'lang-lisp', and group 1 contains the text\n'(hello (world))', then that portion of the token will be passed to the\nregistered lisp handler for formatting.\nThe text before and after group 1 will be restyled using this decorator\nso decorators should take care that this doesn't result in infinite\nrecursion.  For example, the HTML lexer rule for SCRIPT elements looks\nsomething like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n'<script>foo()<\\/script>', which would cause the current decorator to\nbe called with '<script>' which would not match the same rule since\ngroup 1 must not be empty, so it would be instead styled as PR_TAG by\nthe generic tag rule.  The handler registered for the 'js' extension would\nthen be called with 'foo()', and finally, the current decorator would\nbe called with '<\\/script>' which would not match the original rule and\nso the generic tag rule would identify it as a tag.\n\nPattern must only match prefixes, and if it matches a prefix, then that\nmatch is considered a token with the same style.\n\nContext is applied to the last non-whitespace, non-comment token\nrecognized.\n\nShortcut is an optional string of characters, any of which, if the first\ncharacter, gurantee that this pattern and only this pattern matches.",
            "params": [
                {
                    "name": "shortcutStylePatterns",
                    "description": "patterns that always start with\n  a known character.  Must have a shortcut string.",
                    "type": "Array"
                },
                {
                    "name": "fallthroughStylePatterns",
                    "description": "patterns that will be tried in\n  order if the shortcut ones fail.  May have shortcuts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a\n  function that takes source code and returns a list of decorations.",
                "type": "Function (Object)"
            },
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 687,
            "description": "Lexes job.sourceCode and produces an output array job.decorations of\nstyle classes preceded by the position at which they start in\njob.sourceCode in order.",
            "params": [
                {
                    "name": "job",
                    "description": "an object like <pre>{\n   sourceCode: {string} sourceText plain text,\n   basePos: {int} position of job.sourceCode in the larger chunk of\n       sourceCode.\n}</pre>",
                    "type": "Object"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 700,
            "description": "are style markers (e.g., PR_COMMENT) that run from that position until\nthe end.",
            "type": "{Array.<number|string>}",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 787,
            "description": "This code treats \", ', and ` as string delimiters, and \\ as a string\n escape.  It does not recognize perl's qq() style strings.\n It has no special handling for double delimiter escapes as in basic, or\n the tripled delimiters used in python, but should work on those regardless\n although in those cases a single string literal may be broken up into\n multiple adjacent string literals.\nIt recognizes C, C++, and shell style comments.",
            "params": [
                {
                    "name": "options",
                    "description": "a set of optional parameters.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a function that examines the source code\n     in the input job and builds the decoration list.",
                "type": "Function (Object)"
            },
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 853,
            "itemtype": "property",
            "name": "",
            "final": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 961,
            "description": "Given a DOM subtree, wraps it in a list, and puts each line into its own\nlist item.",
            "params": [
                {
                    "name": "node",
                    "description": "modified in place.  Its content is pulled into an\n    HTMLOListElement, and each line is moved into a separate list item.\n    This requires cloning elements, so the input might not have unique\n    IDs after numbering.",
                    "type": "Node"
                },
                {
                    "name": "isPreformatted",
                    "description": "true iff white-space in text nodes should\n    be treated as significant.",
                    "type": "Boolean"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1100,
            "description": "Breaks {@code job.sourceCode} around style boundaries in\n{@code job.decorations} and modifies {@code job.sourceNode} in place.",
            "params": [
                {
                    "name": "job",
                    "description": "like <pre>{\n   sourceCode: {string} source as plain text,\n   spans: {Array.<number|Node>} alternating span start indices into source\n      and the text node or element (e.g. {@code <BR>}) corresponding to that\n      span.\n   decorations: {Array.<number|string} an array of style classes preceded\n      by the position at which they start in job.sourceCode in order\n}</pre>",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1224,
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1226,
            "params": [
                {
                    "name": "handler",
                    "description": "a function from source code to a list\n     of decorations.  Takes a single argument job which describes the\n     state of the computation.   The single parameter has the form\n     {@code {\n       sourceCode: {string} as plain text.\n       decorations: {Array.<number|string>} an array of style classes\n                    preceded by the position at which they start in\n                    job.sourceCode in order.\n                    The language handler should assigned this field.\n       basePos: {int} the position of source in the larger source chunk.\n                All positions in the output decorations array are relative\n                to the larger source chunk.\n     } }",
                    "type": "Function (Object)"
                },
                {
                    "name": "fileExtensions",
                    "description": "",
                    "type": "Array.<string>"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1368,
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1387,
            "params": [
                {
                    "name": "sourceCodeHtml",
                    "description": "The HTML to pretty print.",
                    "type": "String"
                },
                {
                    "name": "opt_langExtension",
                    "description": "The language name to use.\n    Typically, a filename extension like 'cpp' or 'java'.",
                    "type": "String"
                },
                {
                    "name": "opt_numberLines",
                    "description": "True to number lines,\n    or the 1-indexed number of the first line in sourceCodeHtml.",
                    "type": "Number|boolean"
                }
            ],
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1536,
            "description": "Contains functions for creating and registering new language handlers.",
            "type": "{Object}",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1584,
            "fileoverview": "Registers a language handler for Handlebars.",
            "author": "Ryan Grove <ryan@wonko.com>",
            "class": "",
            "_global": true
        },
        {
            "file": "conf/docs/assets/vendor/prettify/prettify.js",
            "line": 1646,
            "fileoverview": "Registers a language handler for CSS.\n\n\nTo use, include prettify.js and this file in your HTML page.\nThen put your code in an HTML tag like\n     <pre class=\"prettyprint lang-css\"></pre>\n\n\nhttp://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\ngrammar.  This scheme does not recognize keywords containing escapes.",
            "author": "mikesamuel@gmail.com",
            "class": "",
            "_global": true
        },
        {
            "file": "lib/builder.js",
            "line": 2,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "_global": true
        },
        {
            "file": "lib/builder.js",
            "line": 121,
            "description": "Register a `Y.Handlebars` helper method",
            "itemtype": "method",
            "name": "_addHelpers",
            "params": [
                {
                    "name": "helpers",
                    "description": "Object containing a hash of names and functions",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 138,
            "description": "Wrapper around the Markdown parser so it can be normalized or even side stepped",
            "itemtype": "method",
            "name": "markdown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The Markdown string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The rendered HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 166,
            "description": "Parse the item to be cross linked and return an HREF linked to the item",
            "itemtype": "method",
            "name": "_parseCrossLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The item to crossLink",
                    "type": "String"
                },
                {
                    "name": "raw",
                    "description": "Do not wrap it in HTML",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "content",
                    "description": "crossLink helper content",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 270,
            "description": "List of native types to cross link to MDN",
            "itemtype": "property",
            "name": "NATIVES",
            "type": "Object",
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 309,
            "description": "Function to link an external type uses `NATIVES` object",
            "itemtype": "method",
            "name": "NATIVES_LINKER",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the type to link",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The combined URL",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 323,
            "description": "Mixes the various external data soures together into the local data, augmenting\nit with flags.",
            "itemtype": "method",
            "name": "_mixExternal",
            "access": "private",
            "tagname": "",
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 370,
            "description": "Fetches the remote data and fires the callback when it's all complete",
            "itemtype": "method",
            "name": "mixExternal",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute when complete",
                    "type": "Callback"
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 445,
            "description": "File counter",
            "itemtype": "property",
            "name": "files",
            "type": "Number",
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 451,
            "description": "Holder for project meta data",
            "itemtype": "property",
            "name": "_meta",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 458,
            "description": "Prep the meta data to be fed to Selleck",
            "itemtype": "method",
            "name": "getProjectMeta",
            "return": {
                "description": "The project metadata",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 499,
            "description": "Populate the meta data for classes",
            "itemtype": "method",
            "name": "populateClasses",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 532,
            "description": "Populate the meta data for modules",
            "itemtype": "method",
            "name": "populateModules",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 578,
            "description": "Populate the meta data for files",
            "itemtype": "method",
            "name": "populateFiles",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 633,
            "description": "Parses file and line number from an item object and build's an HREF",
            "itemtype": "method",
            "name": "addFoundAt",
            "params": [
                {
                    "name": "a",
                    "description": "The item to parse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed HREF",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 649,
            "description": "Augments the **DocParser** meta data to provide default values for certain keys as well as parses all descriptions\nwith the `Markdown Parser`",
            "itemtype": "method",
            "name": "augmentData",
            "params": [
                {
                    "name": "o",
                    "description": "The object to recurse and augment",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The augmented object",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 708,
            "description": "Makes the default directories needed",
            "itemtype": "method",
            "name": "makeDirs",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 761,
            "description": "Parses `<pre><code>` tags and adds the __prettyprint__ `className` to them",
            "itemtype": "method",
            "name": "_parseCode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML to parse",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "The parsed HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 774,
            "description": "Ported from [Selleck](https://github.com/rgrove/selleck), this handles ```'s in fields\n   that are not parsed by the **Markdown** parser.",
            "itemtype": "method",
            "name": "_inlineCode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML to parse",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "The parsed HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 791,
            "description": "Ported from [Selleck](https://github.com/rgrove/selleck)\n   Renders the handlebars templates with the default View class.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "source",
                    "description": "The default template to parse",
                    "type": "HTML"
                },
                {
                    "name": "view",
                    "description": "The default view handler",
                    "type": "Class"
                },
                {
                    "name": "layout",
                    "description": "The HTML from the layout to use.",
                    "type": "HTML",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "partials",
                    "description": "List of partials to include in this template",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "html",
                            "description": "The assembled template markup",
                            "type": "HTML"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 844,
            "description": "Render the index file",
            "itemtype": "method",
            "name": "renderIndex",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 870,
            "description": "Generates the index.html file",
            "itemtype": "method",
            "name": "writeIndex",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to write index view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 902,
            "description": "Render a module",
            "itemtype": "method",
            "name": "renderModule",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1011,
            "description": "Generates the module files under \"out\"/modules/",
            "itemtype": "method",
            "name": "writeModules",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to write module view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1059,
            "description": "Checks an array of items (class items) to see if an item is in that list",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "a",
                    "description": "The Array of items to check",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "The object to find",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1076,
            "description": "Counter for stepping into merges",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_mergeCounter",
            "type": "Number",
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1083,
            "description": "Merge superclass data into a child class",
            "itemtype": "method",
            "name": "mergeExtends",
            "params": [
                {
                    "name": "info",
                    "description": "The item to extend",
                    "type": "Object"
                },
                {
                    "name": "classItems",
                    "description": "The list of items to merge in",
                    "type": "Array"
                },
                {
                    "name": "first",
                    "description": "Set for the first call",
                    "type": "Boolean"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1134,
            "description": "Render the class file",
            "itemtype": "method",
            "name": "renderClass",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1482,
            "description": "Generates the class files under \"out\"/classes/",
            "itemtype": "method",
            "name": "writeClasses",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to write class view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1531,
            "description": "Sort method of array of objects with a property called __name__",
            "itemtype": "method",
            "name": "nameSort",
            "params": [
                {
                    "name": "a",
                    "description": "First object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "Second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "1, -1 or 0 for sorting.",
                "type": "Number"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1554,
            "description": "Generates the syntax files under `\"out\"/files/`",
            "itemtype": "method",
            "name": "writeFiles",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to write file view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1612,
            "description": "Render the source file",
            "itemtype": "method",
            "name": "renderFile",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The View Data",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1664,
            "description": "Write the API meta data used for the AutoComplete widget",
            "itemtype": "method",
            "name": "writeAPIMeta",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute when complete",
                    "type": "Callback"
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1677,
            "description": "Render the API meta and return the JavaScript",
            "itemtype": "method",
            "name": "renderAPIMeta",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "apijs",
                            "description": "The JavaScript code to write API meta data",
                            "type": "String"
                        }
                    ]
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1709,
            "description": "Normalizes a file path to a writable filename:\n\n   var path = 'lib/file.js';\n   returns 'lib_file.js';",
            "itemtype": "method",
            "name": "filterFileName",
            "params": [
                {
                    "name": "f",
                    "description": "The filename to normalize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The filtered file path",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/builder.js",
            "line": 1722,
            "description": "Compiles the templates from the meta-data provided by DocParser",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/cli.js",
            "line": 3,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/docparser.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/docparser.js",
            "line": 11,
            "description": "Parses the JSON data and formats it into a nice log string for\nfilename and line number: `/file/name.js:123`",
            "itemtype": "method",
            "name": "stringlog",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data block from the parser",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The formatted string.",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 37,
            "description": "Flatten a string, remove all line breaks and replace them with a token",
            "itemtype": "method",
            "name": "implodeString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "The string to operate on",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The modified string",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 47,
            "description": "Un-flatten a string, replace tokens injected with `implodeString`",
            "itemtype": "method",
            "name": "implodeString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "The string to operate on",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The modified string",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 93,
            "description": "A list of known tags.  This populates a member variable\nduring initialization, and will be updated if additional\ndigesters are added.",
            "itemtype": "property",
            "name": "TAGLIST",
            "type": "Array",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 175,
            "description": "A list of ignored tags. These tags should be ignored because there is\nlikely to be used for purposes other than JSDoc tags in JavaScript comments.",
            "itemtype": "property",
            "name": "IGNORE_TAGLIST",
            "type": "Array",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 187,
            "description": "Common errors will get scrubbed instead of being ignored.",
            "itemtype": "property",
            "name": "CORRECTIONS",
            "type": "Object",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 210,
            "description": "A map of the default tag processors, keyed by the\ntag name.  Multiple tags can use the same digester\nby supplying the string name that points to the\nimplementation rather than a function.",
            "itemtype": "property",
            "name": "DIGESTERS",
            "type": "Object",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 840,
            "description": "Digesters process the tag/text pairs found in a\ncomment block.  They are looked up by tag name.\nThe digester gets the tagname, the value, the\ntarget object to apply values to, and the full\nblock that is being processed.  Digesters can\nbe declared as strings instead of a function --\nin that case, the program will try to look up\nthe key listed and use the function there instead\n(it is an alias).  Digesters can return a host\nobject in the case the tag defines a new key\nblock type (modules/classes/methods/events/properties)",
            "itemtype": "attribute",
            "name": "digesters",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 862,
            "description": "Emitters will be schemas for the types of payloads\nthe parser will emit.  Not implemented.",
            "itemtype": "attribute",
            "name": "emitters",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 873,
            "description": "Comment syntax type.",
            "itemtype": "attribute",
            "name": "syntaxtype",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 882,
            "description": "The map of file names to file content.",
            "itemtype": "attribute",
            "name": "filemap",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 890,
            "description": "A map of file names to directory name.  Provided in\ncase this needs to be used to reset the module name\nappropriately -- currently not used",
            "itemtype": "attribute",
            "name": "dirmap",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 900,
            "description": "The file currently being parsed",
            "itemtype": "attribute",
            "name": "currentfile",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 921,
            "description": "The main documentation block for the module itself.",
            "itemtype": "attribute",
            "name": "mainmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 957,
            "description": "The module currently being parsed",
            "itemtype": "attribute",
            "name": "currentmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1016,
            "description": "The submodule currently being parsed",
            "itemtype": "attribute",
            "name": "currentsubmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1052,
            "description": "The class currently being parsed",
            "itemtype": "attribute",
            "name": "currentclass",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1091,
            "description": "Takes a non-namespaced classname and resolves it to a namespace (to support `@for`)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_resolveFor",
            "params": [
                {
                    "name": "value",
                    "description": "The classname to resolve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resolved namespace + classname",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1162,
            "description": "Normalizes the initial indentation of the given _content_ so that the first line\nis unindented, and all other lines are unindented to the same degree as the\nfirst line. So if the first line has four spaces at the beginning, then all\nlines will be unindented four spaces. Ported from [Selleck](https://github.com/rgrove/selleck)",
            "itemtype": "method",
            "name": "unindent",
            "params": [
                {
                    "name": "content",
                    "description": "Text to unindent.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Unindented text.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1183,
            "description": "Transforms a JavaDoc style comment block (less the start and end of it)\ninto a list of tag/text pairs. The leading space and '*' are removed,\nbut the remaining whitespace is preserved so that the output should be\nfriendly for both markdown and html parsers.",
            "itemtype": "method",
            "name": "handlecomment",
            "params": [
                {
                    "name": "comment",
                    "description": "The comment to parse",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "The file it was parsed from",
                    "type": "String"
                },
                {
                    "name": "line",
                    "description": "The line number it was found on",
                    "type": "String"
                }
            ],
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1261,
            "description": "Accepts a map of filenames to file content.  Returns\na map of filenames to an array of API comment block\ntext.  This expects the comment to start with / **\non its own line, and end with * / on its own\nline.  Override this function to provide an\nalternative comment parser.",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "filemap",
                    "description": "A map of filenames to file content",
                    "type": "Object"
                },
                {
                    "name": "dirmap",
                    "description": "A map of file names to directory name",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A map of filenames to an array of extracted\ncomment text.",
                "type": "Object"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1317,
            "description": "Processes all the tags in a single comment block",
            "itemtype": "method",
            "name": "processblock",
            "params": [
                {
                    "name": "an",
                    "description": "array of the tag/text pairs",
                    "type": "Array"
                }
            ],
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1391,
            "description": "Transforms a map of filenames to arrays of comment blocks into a\nJSON structure that represents the entire processed API doc info\nand relationships between elements for the entire project.",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "commentmap",
                    "description": "The hash of files and parsed comment blocks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The transformed data for the project",
                "type": "Object"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docparser.js",
            "line": 1507,
            "description": "Extracts and transforms the filemap provided to constructor",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "filemap",
                    "description": "A map of filenames to file content",
                    "type": "Array"
                },
                {
                    "name": "dirmap",
                    "description": "A map of file names to directory name",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this parser instance.  The total results\nare available in parser.data.",
                "type": "DocParser"
            },
            "class": "DocParser",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docview.js",
            "line": 2,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/docview.js",
            "line": 29,
            "description": "**Mustache** `lambda` method for setting the HTML title",
            "itemtype": "method",
            "name": "htmlTitle",
            "class": "DocView",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/docview.js",
            "line": 47,
            "description": "**Mustache** `lambda` method for setting the title",
            "itemtype": "method",
            "name": "title",
            "class": "DocView",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/files.js",
            "line": 37,
            "description": "Copy a directory from one location to another",
            "itemtype": "method",
            "name": "copyDirectory",
            "params": [
                {
                    "name": "source",
                    "description": "The source directory",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination directory",
                    "type": "Path"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\n    if they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when complete.",
                    "type": "Function"
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 125,
            "description": "Copy a file from one location to another",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "source",
                    "description": "The source file",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination file",
                    "type": "Path"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\n    if they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when complete.",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "The Error returned from Node",
                            "type": "Error"
                        }
                    ]
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 178,
            "description": "If _source_ is a file, copies it to _dest_. If it's a directory, recursively\ncopies it and all files and directories it contains to _dest_.\n\nNote that when attempting to copy a file into a directory, you should specify\nthe full path to the new file (including the new filename). Otherwise, it will\nbe interpreted as an attempt to copy the _source_ file *over* the _dest_\ndirectory instead of *into* it.\n\nKnown issues:\n- Doesn't preserve ownership or permissions on copied files/directories.",
            "itemtype": "method",
            "name": "copyPath",
            "params": [
                {
                    "name": "source",
                    "description": "Source path.",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "Destination path.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\nif they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when completed.",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        }
                    ]
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 224,
            "description": "If _path_ is a file, deletes it. If _path_ is a directory, recursively deletes\nit and all files and directories it contains.\n\nThis method is synchronous.",
            "itemtype": "method",
            "name": "deletePath",
            "params": [
                {
                    "name": "path",
                    "description": "File or directory to delete.",
                    "type": "String"
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 248,
            "description": "Check to see if this is a directory",
            "itemtype": "method",
            "name": "isDirectory",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                },
                {
                    "name": "link",
                    "description": "Also validate a symlink",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if it is a directory",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 278,
            "description": "Check to see if this is a File",
            "itemtype": "method",
            "name": "isFile",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                },
                {
                    "name": "link",
                    "description": "Also validate a symlink",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if it is a file",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 305,
            "description": "Check to see if this is a SymLink",
            "itemtype": "method",
            "name": "isSymbolicLink",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                }
            ],
            "return": {
                "description": "True if it is a link",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 319,
            "description": "Like `fs.lstatSync()`, but returns `null` instead of throwing when _path_\ndoesn't exist. Will still throw on other types of errors.",
            "itemtype": "method",
            "name": "lstatSync",
            "params": [
                {
                    "name": "path",
                    "description": "Path to stat.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`fs.Stats` object, or `null` if _path_ doesn't exist.",
                "type": "fs.Stats|null"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 340,
            "description": "Like `fs.statSync()`, but returns `null` instead of throwing when _path_\ndoesn't exist. Will still throw on other types of errors.",
            "itemtype": "method",
            "name": "statSync",
            "params": [
                {
                    "name": "path",
                    "description": "Path to stat.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`fs.Stats` object, or `null` if _path_ doesn't exist.",
                "type": "fs.Stats|null"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 360,
            "description": "Copy the theme assets directory",
            "itemtype": "method",
            "name": "copyAssets",
            "params": [
                {
                    "name": "from",
                    "description": "The source directory",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination directory",
                    "type": "Path"
                },
                {
                    "name": "deleteFirst",
                    "description": "Should the directory be deleted if it exists",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 407,
            "description": "Helper method for getting JSON data from a local file",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "filename",
                    "description": "The filename to parse JSON from",
                    "type": "Path"
                }
            ],
            "return": {
                "description": "The JSON data",
                "type": "Object"
            },
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/files.js",
            "line": 422,
            "description": "Helper method for writing files to disk. It wraps the NodeJS file API",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "file",
                    "description": "The filename to write to",
                    "type": "Path"
                },
                {
                    "name": "data",
                    "description": "The data to write",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Callback",
                    "multiple": true
                }
            ],
            "class": "Files",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/help.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/help.js",
            "line": 14,
            "description": "The help text to display",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "help",
            "type": "Array",
            "class": "Help",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/help.js",
            "line": 62,
            "description": "Render the help message as a string",
            "itemtype": "method",
            "name": "renderHelp",
            "return": {
                "description": "The help screen to display",
                "type": "String"
            },
            "class": "Help",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/help.js",
            "line": 72,
            "description": "Display the help message, write it to the screen and exit",
            "itemtype": "method",
            "name": "showHelp",
            "class": "Help",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/index.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/options.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/options.js",
            "line": 20,
            "description": "Parses arguments and returns an Object of config options",
            "itemtype": "method",
            "name": "Options",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The config object",
                "type": "Object"
            },
            "class": "Options",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/project.js",
            "line": 2,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/server.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/server.js",
            "line": 15,
            "description": "Cache for external mixed in data.",
            "itemtype": "property",
            "name": "_externalData",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 22,
            "description": "Middleware to parse the API docs per request",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Express next callback",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 40,
            "description": "Create the routes used to serve YUIDoc files dynamically",
            "itemtype": "method",
            "name": "routes",
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 106,
            "description": "`/files` endpoint",
            "itemtype": "method",
            "name": "files",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 129,
            "description": "`/classes` endpoint",
            "itemtype": "method",
            "name": "clazz",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 145,
            "description": "`/modules` endpoint",
            "itemtype": "method",
            "name": "modules",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 161,
            "description": "`/` endpoint",
            "itemtype": "method",
            "name": "home",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 173,
            "description": "Creates the Express server and prep's YUI for serving",
            "itemtype": "method",
            "name": "init",
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/server.js",
            "line": 191,
            "description": "Start the server with the supplied options.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "options",
                    "description": "Server options",
                    "type": "Object"
                }
            ],
            "class": "Server",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/utils.js",
            "line": 31,
            "description": "Escapes HTML characters in _html_.",
            "itemtype": "method",
            "name": "escapeHTML",
            "params": [
                {
                    "name": "html",
                    "description": "String to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Escaped string.",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 44,
            "description": "Normalizes the initial indentation of the given _content_ so that the first line\nis unindented, and all other lines are unindented to the same degree as the\nfirst line. So if the first line has four spaces at the beginning, then all\nlines will be unindented four spaces.",
            "itemtype": "method",
            "name": "unindent",
            "params": [
                {
                    "name": "content",
                    "description": "Text to unindent.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Unindented text.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 63,
            "description": "Like `getPages()`, but returns only the files under the `layout/` subdirectory\nof the specified _dir_.",
            "itemtype": "method",
            "name": "getLayouts",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of layout names to layout content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 76,
            "description": "Loads and returns the content of the specified page file.",
            "itemtype": "method",
            "name": "getPage",
            "params": [
                {
                    "name": "pagePath",
                    "description": "Path to a single `.handlebars` page.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Page content, or `null` if not found.",
                "type": "String|null"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 91,
            "description": "Loads pages (files with a `.handlebars` extension) in the specified directory and\nreturns an object containing a mapping of page names (the part of the filename)\npreceding the `.handlebars` extension) to page content.",
            "itemtype": "method",
            "name": "getPages",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of page names to page content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 125,
            "description": "Like `getPages()`, but returns only the files under the `partial/` subdirectory\nof the specified _dir_.",
            "itemtype": "method",
            "name": "getPartials",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of partial names to partial content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 139,
            "description": "Mix/merge/munge data into the template.",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "inDir",
                    "description": "The starting directory",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The `options` for the meta data.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "options",
                            "description": "Merged options.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 224,
            "description": "Walk the directory tree to locate the yuidoc.json file.",
            "itemtype": "method",
            "name": "getProjectData",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to start from",
                    "type": "Path",
                    "optional": true,
                    "optdefault": "process.cwd()"
                }
            ],
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 338,
            "description": "Walks the tree from this dir and returns all the subdirs",
            "itemtype": "method",
            "name": "getDirs",
            "params": [
                {
                    "name": "dir",
                    "description": "The dir to begin at",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The array of directories..",
                "type": "Array"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 364,
            "description": "Make sure all the paths passed are directories and that they are not in the ignore list.",
            "itemtype": "method",
            "name": "validatePaths",
            "params": [
                {
                    "name": "paths",
                    "description": "The array of paths to validate",
                    "type": "Array"
                },
                {
                    "name": "ignore",
                    "description": "A string to call `.indexOf` on a path to determine if it should be ignored",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 452,
            "description": "Takes a type string and converts it to a \"First letter upper cased\" type. e.g. `(string -> String, object -> Object)`",
            "itemtype": "method",
            "name": "fixType",
            "params": [
                {
                    "name": "t",
                    "description": "The type string to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The fixed string",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 474,
            "description": "Produces a normalized web path by joining all the parts and normalizing the\nfilesystem-like path into web compatible url.\nSupports relative and absolute paths.\nCourtesy of [Mojito's utils](https://github.com/yahoo/mojito/)",
            "itemtype": "method",
            "name": "webpath",
            "params": [
                {
                    "name": "url",
                    "description": "the list of parts to be joined and normalized",
                    "type": "Array|String*"
                }
            ],
            "return": {
                "description": "The joined and normalized url",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/utils.js",
            "line": 492,
            "description": "Localize the string via current Y.options",
            "itemtype": "method",
            "name": "localize",
            "params": [
                {
                    "name": "str",
                    "description": "the original string that you want to input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "localized string from the param `str`",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 1,
            "description": "Copyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "class": "",
            "module": "yuidoc",
            "_global": true
        },
        {
            "file": "lib/yuidoc.js",
            "line": 29,
            "description": "The default list of configuration options",
            "itemtype": "property",
            "name": "OPTIONS",
            "type": "Object",
            "final": 1,
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 66,
            "description": "Holds the number of files that we are processing.",
            "itemtype": "property",
            "name": "filecount",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 73,
            "description": "Hash map of dirnames to selleck config options.",
            "itemtype": "property",
            "name": "selleck",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 80,
            "description": "Holder for the list of files we are processing.",
            "itemtype": "property",
            "name": "filemap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 87,
            "description": "Holder for the list of directories we are processing.",
            "itemtype": "property",
            "name": "dirmap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 95,
            "description": "Internal holder for configuration options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 112,
            "description": "Always exclude these directories",
            "itemtype": "method",
            "name": "_setDefaultExcludes",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 127,
            "description": "Does post process on self.options.",
            "itemtype": "method",
            "name": "_processConfig",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 138,
            "description": "Walks the paths and parses the directory contents",
            "itemtype": "method",
            "name": "walk",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 149,
            "description": "Walks the passed directory and grabs all the files recursively.",
            "itemtype": "method",
            "name": "parsedir",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to parse the contents of.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 189,
            "description": "Gathers all the file data and populates the filemap and dirmap hashes.",
            "itemtype": "method",
            "name": "parsefiles",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to start from.",
                    "type": "String"
                },
                {
                    "name": "files",
                    "description": "List of files to parse.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 243,
            "description": "Applies preprocessors to the data tree. \nThis function first clones the data and operates on the clone.",
            "itemtype": "method",
            "name": "runPreprocessors",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The mutated data",
                "type": "Object"
            },
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 278,
            "description": "Writes the parser JSON data to disk.\nApplies preprocessors, if any.",
            "itemtype": "method",
            "name": "writeJSON",
            "params": [
                {
                    "name": "parser",
                    "description": "The DocParser instance to use",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The JSON data returned from the DocParser",
                "type": "Object"
            },
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 360,
            "description": "Process the config, walk the file tree and write out the JSON data.",
            "itemtype": "method",
            "name": "run",
            "return": {
                "description": "The JSON data returned from the DocParser",
                "type": "Object"
            },
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 366,
            "description": "Timestamp holder so we know when YUIDoc started the parse process.",
            "itemtype": "property",
            "name": "starttime",
            "type": "Timestamp",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "lib/yuidoc.js",
            "line": 387,
            "description": "Timestamp holder so we know when YUIDoc has finished the parse process.",
            "itemtype": "property",
            "name": "endtime",
            "type": "Timestamp",
            "class": "YUIDoc",
            "module": "yuidoc",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Renders the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "AreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSeries.js",
            "line": 24,
            "access": "protected",
            "tagname": "Method used by `styles` setter. Overrides base implementation.",
            "itemtype": "method",
            "name": "_setStyles",
            "params": [
                {
                    "name": "newStyles",
                    "description": "Hash of properties to update.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "AreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSeries.js",
            "line": 42,
            "access": "protected",
            "tagname": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "class": "AreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSeries.js",
            "line": 59,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "area",
            "class": "AreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSeries.js",
            "line": 70,
            "description": "Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:\n\n <dl>\n     <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \n     retrieved from the following array:\n     `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n     </dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "AreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSplineSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "AreaSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSplineSeries.js",
            "line": 25,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "areaSpline",
            "class": "AreaSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AreaSplineSeries.js",
            "line": 36,
            "description": "Style properties used for drawing area fills. This attribute is inherited from `Renderer`. Below are the default values:\n\n <dl>\n     <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \n     retrieved from the following array:\n     `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n     </dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "AreaSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 12,
            "description": "Storage for calculatedWidth value.",
            "itemtype": "property",
            "name": "_calculatedWidth",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 21,
            "description": "Storage for calculatedHeight value.",
            "itemtype": "property",
            "name": "_calculatedHeight",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 30,
            "description": "Handles change to the dataProvider",
            "itemtype": "method",
            "name": "_dataChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 45,
            "description": "Handles change to the position attribute",
            "itemtype": "method",
            "name": "_positionChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 58,
            "description": "Updates the the Graphic instance",
            "itemtype": "method",
            "name": "_updateGraphic",
            "params": [
                {
                    "name": "position",
                    "description": "Position of axis",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 84,
            "description": "Handles changes to axis.",
            "itemtype": "method",
            "name": "_updateHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 99,
            "itemtype": "method",
            "name": "renderUI",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 108,
            "itemtype": "method",
            "name": "syncUI",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 139,
            "description": "Creates a graphic instance to be used for the axis line and ticks.",
            "itemtype": "method",
            "name": "_setCanvas",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 172,
            "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 240,
            "description": "Updates the axis when the size changes.",
            "itemtype": "method",
            "name": "_handleSizeChange",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 262,
            "description": "Maps key values to classes containing layout algorithms",
            "itemtype": "property",
            "name": "_layoutClasses",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 277,
            "description": "Draws a line segment between 2 points",
            "itemtype": "method",
            "name": "drawLine",
            "params": [
                {
                    "name": "startPoint",
                    "description": "x and y coordinates for the start point of the line segment",
                    "type": "Object"
                },
                {
                    "name": "endPoint",
                    "description": "x and y coordinates for the for the end point of the line segment",
                    "type": "Object"
                },
                {
                    "name": "line",
                    "description": "styles (weight, color and alpha to be applied to the line segment)",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 292,
            "description": "Generates the properties necessary for rotating and positioning a text field.",
            "itemtype": "method",
            "name": "_getTextRotationProps",
            "params": [
                {
                    "name": "styles",
                    "description": "properties for the text field",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 332,
            "description": "Draws an axis.",
            "itemtype": "method",
            "name": "_drawAxis",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 465,
            "description": "Calculates and sets the total size of a title.",
            "itemtype": "method",
            "name": "_setTotalTitleSize",
            "params": [
                {
                    "name": "styles",
                    "description": "Properties for the title field.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 505,
            "description": "Updates path.",
            "itemtype": "method",
            "name": "_updatePathElement",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 533,
            "description": "Updates the content and style properties for a title field.",
            "itemtype": "method",
            "name": "_updateTitle",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 595,
            "description": "Creates or updates an axis label.",
            "itemtype": "method",
            "name": "getLabel",
            "params": [
                {
                    "name": "pt",
                    "description": "x and y coordinates for the label",
                    "type": "Object"
                },
                {
                    "name": "styles",
                    "description": "styles applied to label",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTMLElement"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 644,
            "description": "Creates a cache of labels that can be re-used when the axis redraws.",
            "itemtype": "method",
            "name": "_createLabelCache",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 666,
            "description": "Removes axis labels from the dom and clears the label cache.",
            "itemtype": "method",
            "name": "_clearLabelCache",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 690,
            "description": "Gets the end point of an axis.",
            "itemtype": "method",
            "name": "getLineEnd",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 712,
            "description": "Calcuates the width or height of an axis depending on its direction.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 738,
            "description": "Gets the position of the first point on an axis.",
            "itemtype": "method",
            "name": "getFirstPoint",
            "params": [
                {
                    "name": "pt",
                    "description": "Object containing x and y coordinates.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 763,
            "description": "Gets the position of the next point on an axis.",
            "itemtype": "method",
            "name": "getNextPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Object containing x and y coordinates.",
                    "type": "Object"
                },
                {
                    "name": "majorUnitDistance",
                    "description": "Distance in pixels between ticks.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 786,
            "description": "Calculates the placement of last tick on an axis.",
            "itemtype": "method",
            "name": "getLastPoint",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 809,
            "description": "Calculates position on the axis.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "point",
                    "description": "contains x and y values",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 844,
            "description": "Rotates and positions a text field.",
            "itemtype": "method",
            "name": "_rotate",
            "params": [
                {
                    "name": "label",
                    "description": "text field to rotate and position",
                    "type": "HTMLElement"
                },
                {
                    "name": "props",
                    "description": "properties to be applied to the text field.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 916,
            "description": "Simulates a rotation with a specified transformOrigin.",
            "itemtype": "method",
            "name": "_simulateTransformOrigin",
            "params": [
                {
                    "name": "matrix",
                    "description": "Reference to a `Matrix` instance.",
                    "type": "Matrix"
                },
                {
                    "name": "rot",
                    "description": "The rotation (in degrees) that will be performed on a matrix.",
                    "type": "Number"
                },
                {
                    "name": "transformOrigin",
                    "description": "An array represeniting the origin in which to perform the transform. The first \nindex represents the x origin and the second index represents the y origin.",
                    "type": "Array"
                },
                {
                    "name": "w",
                    "description": "The width of the object that will be transformed.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The height of the object that will be transformed.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 939,
            "description": "Returns the coordinates (top, right, bottom, left) for the bounding box of the last label.",
            "itemtype": "method",
            "name": "getMaxLabelBounds",
            "return": {
                "description": "Object"
            },
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 950,
            "description": "Returns the coordinates (top, right, bottom, left) for the bounding box of the first label.",
            "itemtype": "method",
            "name": "getMinLabelBounds",
            "return": {
                "description": "Object"
            },
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 961,
            "description": "Returns the coordinates (top, right, bottom, left) for the bounding box of a label.",
            "itemtype": "method",
            "name": "_getLabelBounds",
            "params": [
                {
                    "name": "Value",
                    "description": "of the label",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 992,
            "description": "Removes all DOM elements from an HTML element. Used to clear out labels during detruction\nphase.",
            "itemtype": "method",
            "name": "_removeChildren",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1013,
            "description": "Destructor implementation Axis class. Removes all labels and the Graphic instance from the widget.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1042,
            "description": "Length in pixels of largest text bounding box. Used to calculate the height of the axis.",
            "itemtype": "property",
            "name": "maxLabelSize",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1051,
            "description": "Updates the content of text field. This method writes a value into a text field using \n`appendChild`. If the value is a `String`, it is converted to a `TextNode` first.",
            "itemtype": "method",
            "name": "_setText",
            "params": [
                {
                    "name": "label",
                    "description": "label to be updated",
                    "type": "HTMLElement"
                },
                {
                    "name": "val",
                    "description": "value with which to update the label",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1080,
            "description": "When set, defines the width of a vertical axis instance. By default, vertical axes automatically size based on their contents. When the\nwidth attribute is set, the axis will not calculate its width. When the width attribute is explicitly set, axis labels will postion themselves off of the \nthe inner edge of the axis and the title, if present, will position itself off of the outer edge. If a specified width is less than the sum of \nthe axis' contents, excess content will overflow.",
            "itemtype": "attribute",
            "name": "width",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1108,
            "description": "When set, defines the height of a horizontal axis instance. By default, horizontal axes automatically size based on their contents. When the\nheight attribute is set, the axis will not calculate its height. When the height attribute is explicitly set, axis labels will postion themselves off of the \nthe inner edge of the axis and the title, if present, will position itself off of the outer edge. If a specified height is less than the sum of \nthe axis' contents, excess content will overflow.",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1136,
            "description": "Calculated value of an axis' width. By default, the value is used internally for vertical axes. If the `width` attribute is explicitly set, this value will be ignored.",
            "itemtype": "attribute",
            "name": "calculatedWidth",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1156,
            "description": "Calculated value of an axis' height. By default, the value is used internally for horizontal axes. If the `height` attribute is explicitly set, this value will be ignored.",
            "itemtype": "attribute",
            "name": "calculatedHeight",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1176,
            "description": "Difference betweend the first/last tick and edge of axis.",
            "itemtype": "attribute",
            "name": "edgeOffset",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1188,
            "description": "The graphic in which the axis line and ticks will be rendered.",
            "itemtype": "attribute",
            "name": "graphic",
            "type": "Graphic",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1196,
            "itemtype": "attribute",
            "name": "path",
            "type": "Shape",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1219,
            "itemtype": "attribute",
            "name": "tickPath",
            "type": "Shape",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1242,
            "description": "Contains the contents of the axis.",
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1250,
            "description": "Direction of the axis.",
            "itemtype": "attribute",
            "name": "position",
            "type": "String",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1268,
            "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the top of the axis.",
            "itemtype": "attribute",
            "name": "topTickOffset",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1279,
            "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the bottom of the axis.",
            "itemtype": "attribute",
            "name": "bottomTickOffset",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1290,
            "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the left of the axis.",
            "itemtype": "attribute",
            "name": "leftTickOffset",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1301,
            "description": "Distance determined by the tick styles used to calculate the distance between the axis\nline in relation to the right side of the axis.",
            "itemtype": "attribute",
            "name": "rightTickOffset",
            "type": "Number",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1312,
            "description": "Collection of labels used to render the axis.",
            "itemtype": "attribute",
            "name": "labels",
            "type": "Array",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1326,
            "description": "Collection of points used for placement of labels and ticks along the axis.",
            "itemtype": "attribute",
            "name": "tickPoints",
            "type": "Array",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1345,
            "description": "Indicates whether the axis overlaps the graph. If an axis is the inner most axis on a given\nposition and the tick position is inside or cross, the axis will need to overlap the graph.",
            "itemtype": "attribute",
            "name": "overlapGraph",
            "type": "Boolean",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1361,
            "description": "Object which should have by the labelFunction",
            "itemtype": "attribute",
            "name": "labelFunctionScope",
            "type": "Object",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1369,
            "description": "Length in pixels of largest text bounding box. Used to calculate the height of the axis.",
            "itemtype": "attribute",
            "name": "maxLabelSize",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1389,
            "description": "Title for the axis. When specified, the title will display. The position of the title is determined by the axis position. \n<dl>\n    <dt>top</dt><dd>Appears above the axis and it labels. The default rotation is 0.</dd>\n    <dt>right</dt><dd>Appears to the right of the axis and its labels. The default rotation is 90.</dd>\n    <dt>bottom</dt><dd>Appears below the axis and its labels. The default rotation is 0.</dd>\n    <dt>left</dt><dd>Appears to the left of the axis and its labels. The default rotation is -90.</dd>\n</dl>",
            "itemtype": "attribute",
            "name": "title",
            "type": "String",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1405,
            "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String` or `HTMLElement`. \n<dl>\n     <dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n     <dt>format</dt><dd>Template for formatting label. (optional)</dd>\n</dl>",
            "itemtype": "attribute",
            "name": "labelFunction",
            "type": "Function",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1423,
            "description": "Function used to append an axis value to an axis label. This function has the following signature:\n <dl>\n     <dt>textField</dt><dd>The axis label to be appended. (`HTMLElement`)</dd>\n     <dt>val</dt><dd>The value to attach to the text field. This method will accept an `HTMLELement`\n     or a `String`. This method does not use (`HTMLElement` | `String`)</dd>\n </dl>\nThe default method appends a value to the `HTMLElement` using the `appendChild` method. If the given \nvalue is a `String`, the method will convert the the value to a `textNode` before appending to the \n`HTMLElement`. This method will not convert an `HTMLString` to an `HTMLElement`.",
            "itemtype": "attribute",
            "name": "appendLabelFunction",
            "type": "Function",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1444,
            "description": "Function used to append a title value to the title object. This function has the following signature:\n <dl>\n     <dt>textField</dt><dd>The title text field to be appended. (`HTMLElement`)</dd>\n     <dt>val</dt><dd>The value to attach to the text field. This method will accept an `HTMLELement`\n     or a `String`. This method does not use (`HTMLElement` | `String`)</dd>\n </dl>\nThe default method appends a value to the `HTMLElement` using the `appendChild` method. If the given \nvalue is a `String`, the method will convert the the value to a `textNode` before appending to the \n`HTMLElement` element. This method will not convert an `HTMLString` to an `HTMLElement`.",
            "itemtype": "attribute",
            "name": "appendTitleFunction",
            "type": "Function",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Axis.js",
            "line": 1465,
            "description": "Style properties used for drawing an axis. This attribute is inherited from `Renderer`. Below are the default values:\n <dl>\n     <dt>majorTicks</dt><dd>Properties used for drawing ticks.\n         <dl>\n             <dt>display</dt><dd>Position of the tick. Possible values are `inside`, `outside`, `cross` and `none`. The\n             default value is `inside`.</dd>\n             <dt>length</dt><dd>The length (in pixels) of the tick. The default value is 4.</dd>\n             <dt>color</dt><dd>The color of the tick. The default value is `#dad8c9`</dd>\n             <dt>weight</dt><dd>Number indicating the width of the tick. The default value is 1.</dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>line</dt><dd>Properties used for drawing the axis line. \n         <dl>\n             <dt>weight</dt><dd>Number indicating the width of the axis line. The default value is 1.</dd>\n             <dt>color</dt><dd>The color of the axis line. The default value is `#dad8c9`.</dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the tick. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>majorUnit</dt><dd>Properties used to calculate the `majorUnit` for the axis. \n         <dl>\n             <dt>determinant</dt><dd>The algorithm used for calculating distance between ticks. The possible options are `count` and `distance`. If\n             the `determinant` is `count`, the axis ticks will spaced so that a specified number of ticks appear on the axis. If the `determinant`\n             is `distance`, the axis ticks will spaced out according to the specified distance. The default value is `count`.</dd>\n             <dt>count</dt><dd>Number of ticks to appear on the axis when the `determinant` is `count`. The default value is 11.</dd>\n             <dt>distance</dt><dd>The distance (in pixels) between ticks when the `determinant` is `distance`. The default value is 75.</dd>\n         </dl>\n     </dd>\n     <dt>label</dt><dd>Properties and styles applied to the axis labels.\n         <dl>\n             <dt>color</dt><dd>The color of the labels. The default value is `#808080`.</dd>\n             <dt>alpha</dt><dd>Number between 0 and 1 indicating the opacity of the labels. The default value is 1.</dd>\n             <dt>fontSize</dt><dd>The font-size of the labels. The default value is 85%</dd>\n             <dt>rotation</dt><dd>The rotation, in degrees (between -90 and 90) of the labels. The default value is 0.</dd>\n             <dt>margin</dt><dd>The distance between the label and the axis/tick. Depending on the position of the `Axis`, only one of the properties used.\n                 <dl>\n                     <dt>top</dt><dd>Pixel value used for an axis with a `position` of `bottom`. The default value is 4.</dd>\n                     <dt>right</dt><dd>Pixel value used for an axis with a `position` of `left`. The default value is 4.</dd>\n                     <dt>bottom</dt><dd>Pixel value used for an axis with a `position` of `top`. The default value is 4.</dd>\n                     <dt>left</dt><dd>Pixel value used for an axis with a `position` of `right`. The default value is 4.</dd>\n                 </dl>\n             </dd>\n         </dl>\n     </dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "Axis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 10,
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 26,
            "itemtype": "method",
            "name": "bindUI",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 41,
            "description": "Handles changes to `dataProvider`.",
            "itemtype": "method",
            "name": "_dataProviderChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 69,
            "description": "Constant used to generate unique id.",
            "itemtype": "property",
            "name": "GUID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 78,
            "description": "Type of data used in `Axis`.",
            "itemtype": "property",
            "name": "_type",
            "type": "String",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 88,
            "description": "Storage for `setMaximum` attribute.",
            "itemtype": "property",
            "name": "_setMaximum",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 97,
            "description": "Storage for `dataMaximum` attribute.",
            "itemtype": "property",
            "name": "_dataMaximum",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 106,
            "description": "Storage for `setMinimum` attribute.",
            "itemtype": "property",
            "name": "_setMinimum",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 115,
            "description": "Reference to data array.",
            "itemtype": "property",
            "name": "_data",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 124,
            "description": "Indicates whether the all data is up to date.",
            "itemtype": "property",
            "name": "_updateTotalDataFlag",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 133,
            "description": "Storage for `dataReady` attribute.",
            "itemtype": "property",
            "name": "_dataReady",
            "type": "Boolean",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 143,
            "description": "Adds an array to the key hash.",
            "itemtype": "method",
            "name": "addKey",
            "params": [
                {
                    "name": "value",
                    "description": "Indicates what key to use in retrieving\nthe array."
                }
            ],
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 155,
            "description": "Gets an array of values based on a key.",
            "itemtype": "method",
            "name": "_getKeyArray",
            "params": [
                {
                    "name": "key",
                    "description": "Value key associated with the data array.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array in which the data resides.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 178,
            "description": "Sets data by key",
            "itemtype": "method",
            "name": "_setDataByKey",
            "params": [
                {
                    "name": "key",
                    "description": "Key value to use.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array to use.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 202,
            "description": "Updates the total data array.",
            "itemtype": "method",
            "name": "_updateTotalData",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 223,
            "description": "Removes an array from the key hash.",
            "itemtype": "method",
            "name": "removeKey",
            "params": [
                {
                    "name": "value",
                    "description": "Indicates what key to use in removing from \nthe hash.",
                    "type": "String"
                }
            ],
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 240,
            "description": "Returns a value based of a key value and an index.",
            "itemtype": "method",
            "name": "getKeyValueAt",
            "params": [
                {
                    "name": "key",
                    "description": "value used to look up the correct array",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "within the array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 259,
            "description": "Returns an array of values based on an identifier key.",
            "itemtype": "method",
            "name": "getDataByKey",
            "params": [
                {
                    "name": "value",
                    "description": "value used to identify the array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 276,
            "description": "Calculates the maximum and minimum values for the `Axis`.",
            "itemtype": "method",
            "name": "_updateMinAndMax",
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 312,
            "description": "Returns the total number of majorUnits that will appear on an axis.",
            "itemtype": "method",
            "name": "getTotalMajorUnits",
            "return": {
                "description": "Number"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 334,
            "description": "Returns the distance between major units on an axis.",
            "itemtype": "method",
            "name": "getMajorUnitDistance",
            "params": [
                {
                    "name": "len",
                    "description": "Number of ticks",
                    "type": "Number"
                },
                {
                    "name": "uiLen",
                    "description": "Size of the axis.",
                    "type": "Number"
                },
                {
                    "name": "majorUnit",
                    "description": "Hash of properties used to determine the majorUnit",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 357,
            "description": "Gets the distance that the first and last ticks are offset from there respective\nedges.",
            "itemtype": "method",
            "name": "getEdgeOffset",
            "params": [
                {
                    "name": "ct",
                    "description": "Number of ticks on the axis.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Length (in pixels) of the axis.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 371,
            "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.",
            "itemtype": "method",
            "name": "getLabelByIndex",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the label.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Total number of labels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 391,
            "description": "Updates the `Axis` after a change in keys.",
            "itemtype": "method",
            "name": "_keyChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 404,
            "description": "Checks to see if data extends beyond the range of the axis. If so,\nthat data will need to be hidden. This method is internal, temporary and subject\nto removal in the future.",
            "itemtype": "method",
            "name": "_hasDataOverflow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "Boolean"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 422,
            "description": "Returns a string corresponding to the first label on an \naxis.",
            "itemtype": "method",
            "name": "getMinimumValue",
            "return": {
                "description": "String"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 434,
            "description": "Returns a string corresponding to the last label on an \naxis.",
            "itemtype": "method",
            "name": "getMaximumValue",
            "return": {
                "description": "String"
            },
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 447,
            "description": "Hash of array identifed by a string value.",
            "itemtype": "attribute",
            "name": "keys",
            "type": "Object",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 491,
            "description": "Indicates how to round unit values.\n  <dl>\n      <dt>niceNumber</dt><dd>Units will be smoothed based on the number of ticks and data range.</dd>\n      <dt>auto</dt><dd>If the range is greater than 1, the units will be rounded.</dd>\n      <dt>numeric value</dt><dd>Units will be equal to the numeric value.</dd>\n      <dt>null</dt><dd>No rounding will occur.</dd>\n  </dl>",
            "itemtype": "attribute",
            "name": "roundingMethod",
            "type": "String",
            "default": "niceNumber",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 508,
            "description": "Returns the type of axis data\n  <dl>\n      <dt>time</dt><dd>Manages time data</dd>\n      <dt>stacked</dt><dd>Manages stacked numeric data</dd>      \n      <dt>numeric</dt><dd>Manages numeric data</dd>\n      <dt>category</dt><dd>Manages categorical data</dd>\n  </dl>",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 530,
            "description": "Instance of `ChartDataProvider` that the class uses\nto build its own data.",
            "itemtype": "attribute",
            "name": "dataProvider",
            "type": "Array",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 544,
            "description": "The maximum value contained in the `data` array. Used for\n`maximum` when `autoMax` is true.",
            "itemtype": "attribute",
            "name": "dataMaximum",
            "type": "Number",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 562,
            "description": "The maximum value that will appear on an axis.",
            "itemtype": "attribute",
            "name": "maximum",
            "type": "Number",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 594,
            "description": "The minimum value contained in the `data` array. Used for\n`minimum` when `autoMin` is true.",
            "itemtype": "attribute",
            "name": "dataMinimum",
            "type": "Number",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 612,
            "description": "The minimum value that will appear on an axis.",
            "itemtype": "attribute",
            "name": "minimum",
            "type": "Number",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 637,
            "description": "Determines whether the maximum is calculated or explicitly \nset by the user.",
            "itemtype": "attribute",
            "name": "setMax",
            "type": "Boolean",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 653,
            "description": "Determines whether the minimum is calculated or explicitly\nset by the user.",
            "itemtype": "attribute",
            "name": "setMin",
            "type": "Boolean",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 669,
            "description": "Array of axis data",
            "itemtype": "attribute",
            "name": "data",
            "type": "Array",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/AxisType.js",
            "line": 686,
            "description": "Array containing all the keys in the axis.",
            "itemtype": "attribute",
            "name": "keyCollection",
            "type": "Array",
            "class": "AxisType",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BarSeries.js",
            "line": 13,
            "description": "Helper method for calculating the size of markers.",
            "itemtype": "method",
            "name": "_getMarkerDimensions",
            "params": [
                {
                    "name": "xcoord",
                    "description": "The x-coordinate representing the data point for the marker.",
                    "type": "Number"
                },
                {
                    "name": "ycoord",
                    "description": "The y-coordinate representing the data point for the marker.",
                    "type": "Number"
                },
                {
                    "name": "calculatedSize",
                    "description": "The calculated size for the marker. For a `BarSeries` is it the width. For a `ColumnSeries` it is the height.",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "Distance of position offset dictated by other marker series in the same graph.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "BarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BarSeries.js",
            "line": 42,
            "description": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BarSeries.js",
            "line": 106,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "bar",
            "class": "BarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BarSeries.js",
            "line": 117,
            "description": "Indicates the direction of the category axis that the bars are plotted against.",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "class": "BarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BarSeries.js",
            "line": 127,
            "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>height</dt><dd>indicates the width of the marker. The default value is 12.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "BarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 11,
            "description": "Default margins for text fields.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getDefaultMargins",
            "return": {
                "description": "Object"
            },
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 28,
            "description": "Sets the length of the tick on either side of the axis line.",
            "itemtype": "method",
            "name": "setTickOffsets",
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 65,
            "description": "Calculates the coordinates for the first point on an axis.",
            "itemtype": "method",
            "name": "getLineStart",
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 90,
            "description": "Draws a tick",
            "itemtype": "method",
            "name": "drawTick",
            "params": [
                {
                    "name": "path",
                    "description": "reference to the path `Path` element in which to draw the tick.",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "hash containing x and y coordinates",
                    "type": "Object"
                },
                {
                    "name": "tickStyles",
                    "description": "hash of properties used to draw the tick",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 110,
            "description": "Calculates the point for a label.",
            "itemtype": "method",
            "name": "getLabelPoint",
            "params": [
                {
                    "name": "pt",
                    "description": "Object containing x and y coordinates",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 123,
            "description": "Updates the value for the `maxLabelSize` for use in calculating total size.",
            "itemtype": "method",
            "name": "updateMaxLabelSize",
            "params": [
                {
                    "name": "label",
                    "description": "to measure",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 154,
            "description": "Determines the available label height when the axis width has been explicitly set.",
            "itemtype": "method",
            "name": "getExplicitlySized",
            "return": {
                "description": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 176,
            "description": "Rotate and position title.",
            "itemtype": "method",
            "name": "positionTitle",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 206,
            "description": "Rotate and position labels.",
            "itemtype": "method",
            "name": "positionLabel",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                },
                {
                    "name": "pt",
                    "description": "hash containing the x and y coordinates in which the label will be positioned\nagainst.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 254,
            "description": "Adjusts the coordinates of an axis label based on the rotation.",
            "itemtype": "method",
            "name": "_setRotationCoords",
            "params": [
                {
                    "name": "props",
                    "description": "Coordinates, dimension and rotation properties of the label.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 289,
            "description": "Returns the transformOrigin to use for an axis label based on the position of the axis \nand the rotation of the label.",
            "itemtype": "method",
            "name": "_getTransformOrigin",
            "params": [
                {
                    "name": "rot",
                    "description": "The rotation (in degrees) of the label.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 316,
            "description": "Adjusts position for inner ticks.",
            "itemtype": "method",
            "name": "offsetNodeForTick",
            "params": [
                {
                    "name": "cb",
                    "description": "contentBox of the axis",
                    "type": "Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/BottomAxisLayout.js",
            "line": 329,
            "description": "Assigns a height based on the size of the contents.",
            "itemtype": "method",
            "name": "setCalculatedSize",
            "access": "protected",
            "tagname": "",
            "class": "BottomAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 10,
            "itemtype": "method",
            "name": "renderUI",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 48,
            "description": "When `interactionType` is set to `planar`, listens for mouse move events and fires `planarEvent:mouseover` or `planarEvent:mouseout` depending on the position of the mouse in relation to \ndata points on the `Chart`.",
            "itemtype": "method",
            "name": "_planarEventDispatcher",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 148,
            "description": "Broadcasts when `interactionType` is set to `planar` and a series' marker plane has received a mouseover event.",
            "itemtype": "event",
            "name": "planarEvent:mouseover",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>An array of hashes, each containing information about the category `Axis` of each marker whose plane has been intersected.</dd>\n     <dt>valueItem</dt><dd>An array of hashes, each containing information about the value `Axis` of each marker whose plane has been intersected.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>pageX</dt><dd>The x location of the event on the page (including scroll)</dd>\n     <dt>pageY</dt><dd>The y location of the event on the page (including scroll)</dd>\n     <dt>items</dt><dd>An array including all the series which contain a marker whose plane has been intersected.</dd>\n     <dt>index</dt><dd>Index of the markers in their respective series.</dd>\n     <dt>originEvent</dt><dd>Underlying dom event.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 168,
            "description": "Broadcasts when `interactionType` is set to `planar` and a series' marker plane has received a mouseout event.",
            "itemtype": "event",
            "name": "planarEvent:mouseout",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 196,
            "description": "Indicates the default series type for the chart.",
            "itemtype": "property",
            "name": "_type",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 205,
            "description": "Queue of axes instances that will be updated. This method is used internally to determine when all axes have been updated.",
            "itemtype": "property",
            "name": "_itemRenderQueue",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 214,
            "description": "Adds an `Axis` instance to the `_itemRenderQueue`.",
            "itemtype": "method",
            "name": "_addToAxesRenderQueue",
            "params": [
                {
                    "name": "axis",
                    "description": "An `Axis` instance.",
                    "type": "Axis"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 233,
            "description": "Adds axis instance to the appropriate array based on position",
            "itemtype": "method",
            "name": "_addToAxesCollection",
            "params": [
                {
                    "name": "position",
                    "description": "The position of the axis",
                    "type": "String"
                },
                {
                    "name": "axis",
                    "description": "The `Axis` instance",
                    "type": "Axis"
                }
            ],
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 251,
            "description": "Returns the default value for the `seriesCollection` attribute.",
            "itemtype": "method",
            "name": "_getDefaultSeriesCollection",
            "params": [
                {
                    "name": "val",
                    "description": "Array containing either `CartesianSeries` instances or objects containing data to construct series instances.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 264,
            "description": "Parses and returns a series collection from an object and default properties.",
            "itemtype": "method",
            "name": "_parseSeriesCollection",
            "params": [
                {
                    "name": "val",
                    "description": "Object contain properties for series being set.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 368,
            "description": "Parse and sets the axes for a series instance.",
            "itemtype": "method",
            "name": "_parseSeriesAxes",
            "params": [
                {
                    "name": "series",
                    "description": "A `CartesianSeries` instance.",
                    "type": "CartesianSeries"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 401,
            "description": "Returns the category axis instance for the chart.",
            "itemtype": "method",
            "name": "_getCategoryAxis",
            "return": {
                "description": "Axis"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 417,
            "description": "Returns the value axis for a series.",
            "itemtype": "method",
            "name": "_getSeriesAxis",
            "params": [
                {
                    "name": "key",
                    "description": "The key value used to determine the axis instance.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Axis"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 456,
            "description": "Gets an attribute from an object, using a getter for Base objects and a property for object\nliterals. Used for determining attributes from series/axis references which can be an actual class instance\nor a hash of properties that will be used to create a class instance.",
            "itemtype": "method",
            "name": "_getBaseAttribute",
            "params": [
                {
                    "name": "item",
                    "description": "Object or instance in which the attribute resides.",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "Attribute whose value will be returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 480,
            "description": "Sets an attribute on an object, using a setter of Base objects and a property for object\nliterals. Used for setting attributes on a Base class, either directly or to be stored in an object literal\nfor use at instantiation.",
            "itemtype": "method",
            "name": "_setBaseAttribute",
            "params": [
                {
                    "name": "item",
                    "description": "Object or instance in which the attribute resides.",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "Attribute whose value will be assigned.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to be assigned to the attribute.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 503,
            "description": "Creates `Axis` instances.",
            "itemtype": "method",
            "name": "_setAxes",
            "params": [
                {
                    "name": "val",
                    "description": "Object containing `Axis` instances or objects in which to construct `Axis` instances.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 619,
            "description": "Adds axes to the chart.",
            "itemtype": "method",
            "name": "_addAxes",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 676,
            "description": "Renders the Graph.",
            "itemtype": "method",
            "name": "_addSeries",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 690,
            "description": "Adds gridlines to the chart.",
            "itemtype": "method",
            "name": "_addGridlines",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 763,
            "description": "Returns all the keys contained in a  `dataProvider`.",
            "itemtype": "method",
            "name": "_getAllKeys",
            "params": [
                {
                    "name": "dp",
                    "description": "Collection of objects to be parsed.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 791,
            "description": "Default Function for the axes attribute.",
            "itemtype": "method",
            "name": "_getDefaultAxes",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 803,
            "description": "Generates and returns a key-indexed object containing `Axis` instances or objects used to create `Axis` instances.",
            "itemtype": "method",
            "name": "_parseAxes",
            "params": [
                {
                    "name": "axes",
                    "description": "Object containing `Axis` instances or `Axis` attributes.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 970,
            "description": "Determines the position of an axis when one is not specified.",
            "itemtype": "method",
            "name": "_getDefaultAxisPosition",
            "params": [
                {
                    "name": "axis",
                    "description": "`Axis` instance.",
                    "type": "Axis"
                },
                {
                    "name": "valueAxes",
                    "description": "Array of `Axis` instances.",
                    "type": "Array"
                },
                {
                    "name": "position",
                    "description": "Default position depending on the direction of the chart and type of axis.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1014,
            "description": "Returns an object literal containing a categoryItem and a valueItem for a given series index. Below is the structure of each:",
            "itemtype": "method",
            "name": "getSeriesItems",
            "params": [
                {
                    "name": "series",
                    "description": "Reference to a series.",
                    "type": "CartesianSeries"
                },
                {
                    "name": "index",
                    "description": "Index of the specified item within a series.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object An object literal containing the following:\n\n <dl>\n     <dt>categoryItem</dt><dd>Object containing the following data related to the category axis of the series.\n <dl>\n     <dt>axis</dt><dd>Reference to the category axis of the series.</dd>\n     <dt>key</dt><dd>Category key for the series.</dd>\n     <dt>value</dt><dd>Value on the axis corresponding to the series index.</dd>\n </dl>\n     </dd>\n     <dt>valueItem</dt><dd>Object containing the following data related to the category axis of the series.\n <dl>\n     <dt>axis</dt><dd>Reference to the value axis of the series.</dd>\n     <dt>key</dt><dd>Value key for the series.</dd>\n     <dt>value</dt><dd>Value on the axis corresponding to the series index.</dd>\n </dl>\n     </dd>\n </dl>"
            },
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1080,
            "description": "Handler for sizeChanged event.",
            "itemtype": "method",
            "name": "_sizeChanged",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1102,
            "description": "Returns the maximum distance in pixels that the extends outside the top bounds of all vertical axes.",
            "itemtype": "method",
            "name": "_getTopOverflow",
            "params": [
                {
                    "name": "set1",
                    "description": "Collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "set2",
                    "description": "Seconf collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "Width of the axes",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1140,
            "description": "Returns the maximum distance in pixels that the extends outside the right bounds of all horizontal axes.",
            "itemtype": "method",
            "name": "_getRightOverflow",
            "params": [
                {
                    "name": "set1",
                    "description": "Collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "set2",
                    "description": "Seconf collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "Width of the axes",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1178,
            "description": "Returns the maximum distance in pixels that the extends outside the left bounds of all horizontal axes.",
            "itemtype": "method",
            "name": "_getLeftOverflow",
            "params": [
                {
                    "name": "set1",
                    "description": "Collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "set2",
                    "description": "Seconf collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "width",
                    "description": "Width of the axes",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1216,
            "description": "Returns the maximum distance in pixels that the extends outside the bottom bounds of all vertical axes.",
            "itemtype": "method",
            "name": "_getBottomOverflow",
            "params": [
                {
                    "name": "set1",
                    "description": "Collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "set2",
                    "description": "Seconf collection of axes to check.",
                    "type": "Array"
                },
                {
                    "name": "height",
                    "description": "Height of the axes",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1254,
            "description": "Redraws and position all the components of the chart instance.",
            "itemtype": "method",
            "name": "_redraw",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1518,
            "description": "Destructor implementation for the CartesianChart class. Calls destroy on all axes, series and the Graph instance.\nRemoves the tooltip and overlay HTML elements.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1575,
            "description": "Returns the appropriate message based on the key press.",
            "itemtype": "method",
            "name": "_getAriaMessage",
            "params": [
                {
                    "name": "key",
                    "description": "The keycode that was pressed.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1658,
            "description": "Indicates whether axis labels are allowed to overflow beyond the bounds of the chart's content box.",
            "itemtype": "attribute",
            "name": "allowContentOverflow",
            "type": "Boolean",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1668,
            "description": "Style object for the axes.",
            "itemtype": "attribute",
            "name": "axesStyles",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1712,
            "description": "Style object for the series",
            "itemtype": "attribute",
            "name": "seriesStyles",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1775,
            "description": "Styles for the graph.",
            "itemtype": "attribute",
            "name": "graphStyles",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1801,
            "description": "Style properties for the chart. Contains a key indexed hash of the following:\n <dl>\n     <dt>series</dt><dd>A key indexed hash containing references to the `styles` attribute for each series in the chart.\n     Specific style attributes vary depending on the series:\n     <ul>\n         <li><a href=\"AreaSeries.html#attr_styles\">AreaSeries</a></li>\n         <li><a href=\"BarSeries.html#attr_styles\">BarSeries</a></li>\n         <li><a href=\"ColumnSeries.html#attr_styles\">ColumnSeries</a></li>\n         <li><a href=\"ComboSeries.html#attr_styles\">ComboSeries</a></li>\n         <li><a href=\"LineSeries.html#attr_styles\">LineSeries</a></li>\n         <li><a href=\"MarkerSeries.html#attr_styles\">MarkerSeries</a></li>\n         <li><a href=\"SplineSeries.html#attr_styles\">SplineSeries</a></li>\n     </ul>\n     </dd>\n     <dt>axes</dt><dd>A key indexed hash containing references to the `styles` attribute for each axes in the chart. Specific\n     style attributes can be found in the <a href=\"Axis.html#attr_styles\">Axis</a> class.</dd>\n     <dt>graph</dt><dd>A reference to the `styles` attribute in the chart. Specific style attributes can be found in the\n     <a href=\"Graph.html#attr_styles\">Graph</a> class.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1866,
            "description": "Axes to appear in the chart. This can be a key indexed hash of axis instances or object literals\nused to construct the appropriate axes.",
            "itemtype": "attribute",
            "name": "axes",
            "type": "Object",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1882,
            "description": "Collection of series to appear on the chart. This can be an array of Series instances or object literals\nused to construct the appropriate series.",
            "itemtype": "attribute",
            "name": "seriesCollection",
            "type": "Array",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1898,
            "description": "Reference to the left-aligned axes for the chart.",
            "itemtype": "attribute",
            "name": "leftAxesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1907,
            "description": "Reference to the bottom-aligned axes for the chart.",
            "itemtype": "attribute",
            "name": "bottomAxesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1916,
            "description": "Reference to the right-aligned axes for the chart.",
            "itemtype": "attribute",
            "name": "rightAxesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1925,
            "description": "Reference to the top-aligned axes for the chart.",
            "itemtype": "attribute",
            "name": "topAxesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1934,
            "description": "Indicates whether or not the chart is stacked.",
            "itemtype": "attribute",
            "name": "stacked",
            "type": "Boolean",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1944,
            "description": "Direction of chart's category axis when there is no series collection specified. Charts can\nbe horizontal or vertical. When the chart type is column, the chart is horizontal.\nWhen the chart type is bar, the chart is vertical.",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1974,
            "description": "Indicates whether or not an area is filled in a combo chart.",
            "itemtype": "attribute",
            "name": "showAreaFill",
            "type": "Boolean",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1982,
            "description": "Indicates whether to display markers in a combo chart.",
            "itemtype": "attribute",
            "name": "showMarkers",
            "type": "Boolean",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1990,
            "description": "Indicates whether to display lines in a combo chart.",
            "itemtype": "attribute",
            "name": "showLines",
            "type": "Boolean",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 1998,
            "description": "Indicates the key value used to identify a category axis in the `axes` hash. If\nnot specified, the categoryKey attribute value will be used.",
            "itemtype": "attribute",
            "name": "categoryAxisName",
            "type": "String",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 2008,
            "description": "Indicates the key value used to identify a the series axis when an axis not generated.",
            "itemtype": "attribute",
            "name": "valueAxisName",
            "type": "String",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 2018,
            "description": "Reference to the horizontalGridlines for the chart.",
            "itemtype": "attribute",
            "name": "horizontalGridlines",
            "type": "Gridlines",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 2052,
            "description": "Reference to the verticalGridlines for the chart.",
            "itemtype": "attribute",
            "name": "verticalGridlines",
            "type": "Gridlines",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 2086,
            "description": "Type of chart when there is no series collection specified.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChart.js",
            "line": 2123,
            "description": "Reference to the category axis used by the chart.",
            "itemtype": "attribute",
            "name": "categoryAxis",
            "type": "Axis",
            "class": "CartesianChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 56,
            "description": "Displays items horizontally in a legend.",
            "itemtype": "method",
            "name": "_positionLegendItems",
            "params": [
                {
                    "name": "items",
                    "description": "Array of items to display in the legend.",
                    "type": "Array"
                },
                {
                    "name": "maxWidth",
                    "description": "The width of the largest item in the legend.",
                    "type": "Number"
                },
                {
                    "name": "maxHeight",
                    "description": "The height of the largest item in the legend.",
                    "type": "Number"
                },
                {
                    "name": "totalWidth",
                    "description": "The total width of all items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "totalHeight",
                    "description": "The total height of all items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "padding",
                    "description": "The left, top, right and bottom padding properties for the legend.",
                    "type": "Number"
                },
                {
                    "name": "horizontalGap",
                    "description": "The horizontal distance between items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "verticalGap",
                    "description": "The vertical distance between items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "hAlign",
                    "description": "The horizontal alignment of the legend.",
                    "type": "String"
                },
                {
                    "name": "vAlign",
                    "description": "The vertical alignment of the legend.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HorizontalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 133,
            "description": "Creates row and total width arrays used for displaying multiple rows of\nlegend items based on the items, available width and horizontalGap for the legend.",
            "itemtype": "method",
            "name": "_setRowArrays",
            "params": [
                {
                    "name": "items",
                    "description": "Array of legend items to display in a legend.",
                    "type": "Array"
                },
                {
                    "name": "limit",
                    "description": "Total available width for displaying items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "horizontalGap",
                    "description": "Horizontal distance between items in a legend.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "HorizontalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 177,
            "description": "Returns the starting x-coordinate for a row of legend items.",
            "itemtype": "method",
            "name": "getStartPoint",
            "params": [
                {
                    "name": "w",
                    "description": "Width of the legend.",
                    "type": "Number"
                },
                {
                    "name": "totalWidth",
                    "description": "Total width of all labels in the row.",
                    "type": "Number"
                },
                {
                    "name": "align",
                    "description": "Horizontal alignment of items for the legend.",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "Object contain left, top, right and bottom padding properties.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "HorizontalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 215,
            "description": "Displays items vertically in a legend.",
            "itemtype": "method",
            "name": "_positionLegendItems",
            "params": [
                {
                    "name": "items",
                    "description": "Array of items to display in the legend.",
                    "type": "Array"
                },
                {
                    "name": "maxWidth",
                    "description": "The width of the largest item in the legend.",
                    "type": "Number"
                },
                {
                    "name": "maxHeight",
                    "description": "The height of the largest item in the legend.",
                    "type": "Number"
                },
                {
                    "name": "totalWidth",
                    "description": "The total width of all items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "totalHeight",
                    "description": "The total height of all items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "padding",
                    "description": "The left, top, right and bottom padding properties for the legend.",
                    "type": "Number"
                },
                {
                    "name": "horizontalGap",
                    "description": "The horizontal distance between items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "verticalGap",
                    "description": "The vertical distance between items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "hAlign",
                    "description": "The horizontal alignment of the legend.",
                    "type": "String"
                },
                {
                    "name": "vAlign",
                    "description": "The vertical alignment of the legend.",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 295,
            "description": "Creates column and total height arrays used for displaying multiple columns of\nlegend items based on the items, available height and verticalGap for the legend.",
            "itemtype": "method",
            "name": "_setColumnArrays",
            "params": [
                {
                    "name": "items",
                    "description": "Array of legend items to display in a legend.",
                    "type": "Array"
                },
                {
                    "name": "limit",
                    "description": "Total available height for displaying items in a legend.",
                    "type": "Number"
                },
                {
                    "name": "verticalGap",
                    "description": "Vertical distance between items in a legend.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 339,
            "description": "Returns the starting y-coordinate for a column of legend items.",
            "itemtype": "method",
            "name": "getStartPoint",
            "params": [
                {
                    "name": "h",
                    "description": "Height of the legend.",
                    "type": "Number"
                },
                {
                    "name": "totalHeight",
                    "description": "Total height of all labels in the column.",
                    "type": "Number"
                },
                {
                    "name": "align",
                    "description": "Vertical alignment of items for the legend.",
                    "type": "String"
                },
                {
                    "name": "padding",
                    "description": "Object contain left, top, right and bottom padding properties.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 370,
            "description": "Redraws and position all the components of the chart instance.",
            "itemtype": "method",
            "name": "_redraw",
            "access": "private",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 662,
            "description": "Positions the legend in a chart and returns the properties of the legend to be used in the \nchart's layout algorithm.",
            "itemtype": "method",
            "name": "_getLayoutDimensions",
            "return": {
                "description": "The left, top, right and bottom values for the legend.",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianChartLegend.js",
            "line": 716,
            "description": "Destructor implementation for the CartesianChart class. Calls destroy on all axes, series, legend (if available) and the Graph instance.\nRemoves the tooltip and overlay HTML elements.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "VerticalLegendLayout",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 11,
            "description": "Storage for `xDisplayName` attribute.",
            "itemtype": "property",
            "name": "_xDisplayName",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 20,
            "description": "Storage for `yDisplayName` attribute.",
            "itemtype": "property",
            "name": "_yDisplayName",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 29,
            "description": "Th x-coordinate for the left edge of the series.",
            "itemtype": "property",
            "name": "_leftOrigin",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 38,
            "description": "The y-coordinate for the bottom edge of the series.",
            "itemtype": "property",
            "name": "_bottomOrigin",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 47,
            "itemtype": "method",
            "name": "render",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 59,
            "description": "Adds event listeners.",
            "itemtype": "method",
            "name": "addListeners",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 105,
            "description": "Event handler for the xAxisChange event.",
            "itemtype": "method",
            "name": "_xAxisChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 119,
            "description": "Event handler the yAxisChange event.",
            "itemtype": "method",
            "name": "_yAxisChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 133,
            "description": "Constant used to generate unique id.",
            "itemtype": "property",
            "name": "GUID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 142,
            "description": "Event handler for xDataChange event.",
            "itemtype": "method",
            "name": "_xDataChangeHandler",
            "params": [
                {
                    "name": "event",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 158,
            "description": "Event handler for yDataChange event.",
            "itemtype": "method",
            "name": "_yDataChangeHandler",
            "params": [
                {
                    "name": "event",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 174,
            "description": "Checks to ensure that both xAxis and yAxis data are available. If so, set the `xData` and `yData` attributes and return `true`. Otherwise, return `false`.",
            "itemtype": "method",
            "name": "_updateAxisData",
            "return": {
                "description": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 204,
            "description": "Draws the series is the xAxis and yAxis data are both available.",
            "itemtype": "method",
            "name": "validate",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 222,
            "description": "Creates a `Graphic` instance.",
            "itemtype": "method",
            "name": "_setCanvas",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 235,
            "description": "Calculates the coordinates for the series.",
            "itemtype": "method",
            "name": "setAreaData",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 321,
            "description": "Draws the series.",
            "itemtype": "method",
            "name": "draw",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 362,
            "description": "Default value for plane offsets when the parent chart's `interactiveType` is `planar`.",
            "itemtype": "property",
            "name": "_defaultPlaneOffset",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 371,
            "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 389,
            "description": "Collection of default colors used for lines in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultLineColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 398,
            "description": "Collection of default colors used for marker fills in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultFillColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 407,
            "description": "Collection of default colors used for marker borders in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultBorderColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 416,
            "description": "Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultSliceColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 425,
            "description": "Parses a color based on a series order and type.",
            "itemtype": "method",
            "name": "_getDefaultColor",
            "params": [
                {
                    "name": "index",
                    "description": "Index indicating the series order.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "Indicates which type of object needs the color.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 453,
            "description": "Shows/hides contents of the series.",
            "itemtype": "method",
            "name": "_handleVisibleChange",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 465,
            "description": "Returns the sum of all values for the series.",
            "itemtype": "method",
            "name": "getTotalValues",
            "return": {
                "description": "Number"
            },
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 477,
            "description": "Destructor implementation for the CartesianSeries class. Calls destroy on all Graphic instances.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 501,
            "description": "Name used for for displaying data related to the x-coordinate.",
            "itemtype": "attribute",
            "name": "xDisplayName",
            "type": "String",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 520,
            "description": "Name used for for displaying data related to the y-coordinate.",
            "itemtype": "attribute",
            "name": "yDisplayName",
            "type": "String",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 539,
            "description": "Name used for for displaying category data",
            "itemtype": "attribute",
            "name": "categoryDisplayName",
            "type": "String",
            "readonly": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 555,
            "description": "Name used for for displaying value data",
            "itemtype": "attribute",
            "name": "valueDisplayName",
            "type": "String",
            "readonly": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 571,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "cartesian",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 582,
            "description": "Order of this instance of this `type`.",
            "itemtype": "attribute",
            "name": "order",
            "type": "Number",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 590,
            "description": "Order of the instance",
            "itemtype": "attribute",
            "name": "graphOrder",
            "type": "Number",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 598,
            "description": "x coordinates for the series.",
            "itemtype": "attribute",
            "name": "xcoords",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 606,
            "description": "y coordinates for the series",
            "itemtype": "attribute",
            "name": "ycoords",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 614,
            "description": "Reference to the `Chart` application.",
            "itemtype": "attribute",
            "name": "chart",
            "type": "ChartBase",
            "readonly": "",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 630,
            "description": "Reference to the `Graph` in which the series is drawn into.",
            "itemtype": "attribute",
            "name": "graph",
            "type": "Graph",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 638,
            "description": "Reference to the `Axis` instance used for assigning \nx-values to the graph.",
            "itemtype": "attribute",
            "name": "xAxis",
            "type": "Axis",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 647,
            "description": "Reference to the `Axis` instance used for assigning \ny-values to the graph.",
            "itemtype": "attribute",
            "name": "yAxis",
            "type": "Axis",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 656,
            "description": "Indicates which array to from the hash of value arrays in \nthe x-axis `Axis` instance.",
            "itemtype": "attribute",
            "name": "xKey",
            "type": "String",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 670,
            "description": "Indicates which array to from the hash of value arrays in \nthe y-axis `Axis` instance.",
            "itemtype": "attribute",
            "name": "yKey",
            "type": "String",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 684,
            "description": "Array of x values for the series.",
            "itemtype": "attribute",
            "name": "xData",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 692,
            "description": "Array of y values for the series.",
            "itemtype": "attribute",
            "name": "yData",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 700,
            "description": "Indicates whether the Series has been through its initial set up.",
            "itemtype": "attribute",
            "name": "rendered",
            "type": "Boolean",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 725,
            "description": "Returns the height of the parent graph",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 740,
            "description": "Indicates whether to show the series",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "true",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 751,
            "description": "Collection of area maps along the xAxis. Used to determine mouseover for multiple\nseries.",
            "itemtype": "attribute",
            "name": "xMarkerPlane",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 760,
            "description": "Collection of area maps along the yAxis. Used to determine mouseover for multiple\nseries.",
            "itemtype": "attribute",
            "name": "yMarkerPlane",
            "type": "Array",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 769,
            "description": "Distance from a data coordinate to the left/right for setting a hotspot.",
            "itemtype": "attribute",
            "name": "xMarkerPlaneOffset",
            "type": "Number",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 786,
            "description": "Distance from a data coordinate to the top/bottom for setting a hotspot.",
            "itemtype": "attribute",
            "name": "yMarkerPlaneOffset",
            "type": "Number",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 803,
            "description": "Direction of the series",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CartesianSeries.js",
            "line": 813,
            "description": "Indicates whether or not markers for a series will be grouped and rendered in a single complex shape instance.",
            "itemtype": "attribute",
            "name": "groupMarkers",
            "type": "Boolean",
            "class": "CartesianSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 19,
            "description": "Formats a label based on the axis type and optionally specified format.",
            "itemtype": "method",
            "name": "formatLabel",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "format",
                    "description": "Pattern used to format the value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 32,
            "description": "Object storing key data.",
            "itemtype": "property",
            "name": "_indices",
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 40,
            "description": "Constant used to generate unique id.",
            "itemtype": "property",
            "name": "GUID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 49,
            "description": "Type of data used in `Axis`.",
            "itemtype": "property",
            "name": "_dataType",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 58,
            "description": "Calculates the maximum and minimum values for the `Axis`.",
            "itemtype": "method",
            "name": "_updateMinAndMax",
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 70,
            "description": "Gets an array of values based on a key.",
            "itemtype": "method",
            "name": "_getKeyArray",
            "params": [
                {
                    "name": "key",
                    "description": "Value key associated with the data array.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array in which the data resides.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 100,
            "description": "Sets data by key",
            "itemtype": "method",
            "name": "_setDataByKey",
            "params": [
                {
                    "name": "key",
                    "description": "Key value to use.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array to use.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 131,
            "description": "Returns an array of values based on an identifier key.",
            "itemtype": "method",
            "name": "getDataByKey",
            "params": [
                {
                    "name": "value",
                    "description": "value used to identify the array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 152,
            "description": "Returns the total number of majorUnits that will appear on an axis.",
            "itemtype": "method",
            "name": "getTotalMajorUnits",
            "params": [
                {
                    "name": "majorUnit",
                    "description": "Object containing properties related to the majorUnit.",
                    "type": "Object"
                },
                {
                    "name": "len",
                    "description": "Length of the axis.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 165,
            "description": "Returns the distance between major units on an axis.",
            "itemtype": "method",
            "name": "getMajorUnitDistance",
            "params": [
                {
                    "name": "len",
                    "description": "Number of ticks",
                    "type": "Number"
                },
                {
                    "name": "uiLen",
                    "description": "Size of the axis.",
                    "type": "Number"
                },
                {
                    "name": "majorUnit",
                    "description": "Hash of properties used to determine the majorUnit",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 188,
            "description": "Gets the distance that the first and last ticks are offset from there respective\nedges.",
            "itemtype": "method",
            "name": "getEdgeOffset",
            "params": [
                {
                    "name": "ct",
                    "description": "Number of ticks on the axis.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Length (in pixels) of the axis.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 202,
            "description": "Returns a value based of a key value and an index.",
            "itemtype": "method",
            "name": "getKeyValueAt",
            "params": [
                {
                    "name": "key",
                    "description": "value used to look up the correct array",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "within the array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 221,
            "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.",
            "itemtype": "method",
            "name": "getLabelByIndex",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the label.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Total number of labels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 246,
            "description": "Returns a string corresponding to the first label on an \naxis.",
            "itemtype": "method",
            "name": "getMinimumValue",
            "return": {
                "description": "String"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CategoryAxis.js",
            "line": 260,
            "description": "Returns a string corresponding to the last label on an \naxis.",
            "itemtype": "method",
            "name": "getMaximumValue",
            "return": {
                "description": "String"
            },
            "class": "CategoryAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 11,
            "description": "Sets the `aria-label` for the chart.",
            "itemtype": "attribute",
            "name": "ariaLabel",
            "type": "String",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 31,
            "description": "Sets the aria description for the chart.",
            "itemtype": "attribute",
            "name": "ariaDescription",
            "type": "String",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 51,
            "description": "Reference to the default tooltip available for the chart.\n<p>Contains the following properties:</p>\n <dl>\n     <dt>node</dt><dd>Reference to the actual dom node</dd>\n     <dt>showEvent</dt><dd>Event that should trigger the tooltip</dd>\n     <dt>hideEvent</dt><dd>Event that should trigger the removal of a tooltip (can be an event or an array of events)</dd>\n     <dt>styles</dt><dd>A hash of style properties that will be applied to the tooltip node</dd>\n     <dt>show</dt><dd>Indicates whether or not to show the tooltip</dd>\n     <dt>markerEventHandler</dt><dd>Displays and hides tooltip based on marker events</dd>\n     <dt>planarEventHandler</dt><dd>Displays and hides tooltip based on planar events</dd>\n     <dt>markerLabelFunction</dt><dd>Reference to the function used to format a marker event triggered tooltip's text. The method contains \n     the following arguments:\n <dl>\n     <dt>categoryItem</dt><dd>An object containing the following:\n <dl>\n     <dt>axis</dt><dd>The axis to which the category is bound.</dd>\n     <dt>displayName</dt><dd>The display name set to the category (defaults to key if not provided).</dd>\n     <dt>key</dt><dd>The key of the category.</dd>\n     <dt>value</dt><dd>The value of the category.</dd>\n </dl>\n </dd>\n <dt>valueItem</dt><dd>An object containing the following:\n     <dl>\n         <dt>axis</dt><dd>The axis to which the item's series is bound.</dd>\n         <dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n         <dt>key</dt><dd>The key for the series.</dd>\n         <dt>value</dt><dd>The value for the series item.</dd> \n     </dl>\n </dd>\n <dt>itemIndex</dt><dd>The index of the item within the series.</dd>\n <dt>series</dt><dd> The `CartesianSeries` instance of the item.</dd>\n <dt>seriesIndex</dt><dd>The index of the series in the `seriesCollection`.</dd>\n </dl>\n The method returns an `HTMLElement` which is written into the DOM using `appendChild`. If you override this method and choose to return an html string, you\n will also need to override the tooltip's `setTextFunction` method to accept an html string.\n </dd>\n <dt>planarLabelFunction</dt><dd>Reference to the function used to format a planar event triggered tooltip's text\n <dl>\n     <dt>categoryAxis</dt><dd> `CategoryAxis` Reference to the categoryAxis of the chart.\n     <dt>valueItems</dt><dd>Array of objects for each series that has a data point in the coordinate plane of the event. Each object contains the following data:\n <dl>\n     <dt>axis</dt><dd>The value axis of the series.</dd>\n     <dt>key</dt><dd>The key for the series.</dd>\n     <dt>value</dt><dd>The value for the series item.</dd>\n     <dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n </dl> \n </dd>\n     <dt>index</dt><dd>The index of the item within its series.</dd>\n     <dt>seriesArray</dt><dd>Array of series instances for each value item.</dd>\n     <dt>seriesIndex</dt><dd>The index of the series in the `seriesCollection`.</dd>\n </dl>\n </dd>\n </dl>\n The method returns an `HTMLElement` which is written into the DOM using `appendChild`. If you override this method and choose to return an html string, you\n will also need to override the tooltip's `setTextFunction` method to accept an html string.\n </dd>\n <dt>setTextFunction</dt><dd>Method that writes content returned from `planarLabelFunction` or `markerLabelFunction` into the the tooltip node.\n has the following signature:\n <dl>\n     <dt>label</dt><dd>The `HTMLElement` that the content is to be added.</dd>\n     <dt>val</dt><dd>The content to be rendered into tooltip. This can be a `String` or `HTMLElement`. If an HTML string is used, it will be rendered as a\n     string.</dd>\n </dl>\n </dd>\n </dl>",
            "itemtype": "attribute",
            "name": "tooltip",
            "type": "Object",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 129,
            "description": "The key value used for the chart's category axis.",
            "itemtype": "attribute",
            "name": "categoryKey",
            "type": "String",
            "default": "category",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 140,
            "description": "Indicates the type of axis to use for the category axis.\n\n <dl>\n     <dt>category</dt><dd>Specifies a `CategoryAxis`.</dd>\n     <dt>time</dt><dd>Specifies a `TimeAxis</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "categoryType",
            "type": "String",
            "default": "category",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 156,
            "description": "Indicates the the type of interactions that will fire events.\n\n <dl>\n     <dt>marker</dt><dd>Events will be broadcasted when the mouse interacts with individual markers.</dd>\n     <dt>planar</dt><dd>Events will be broadcasted when the mouse intersects the plane of any markers on the chart.</dd>\n     <dt>none</dt><dd>No events will be broadcasted.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "interactionType",
            "type": "String",
            "default": "marker",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 173,
            "description": "Data used to generate the chart.",
            "itemtype": "attribute",
            "name": "dataProvider",
            "type": "Array",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 186,
            "description": "A collection of keys that map to the series axes. If no keys are set,\nthey will be generated automatically depending on the data structure passed into \nthe chart.",
            "itemtype": "attribute",
            "name": "seriesKeys",
            "type": "Array",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 196,
            "description": "Reference to all the axes in the chart.",
            "itemtype": "attribute",
            "name": "axesCollection",
            "type": "Array",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 204,
            "description": "Reference to graph instance.",
            "itemtype": "attribute",
            "name": "graph",
            "type": "Graph",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 214,
            "description": "Indicates whether or not markers for a series will be grouped and rendered in a single complex shape instance.",
            "itemtype": "attribute",
            "name": "groupMarkers",
            "type": "Boolean",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 235,
            "description": "Handler for itemRendered event.",
            "itemtype": "method",
            "name": "_itemRendered",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 251,
            "description": "Default value function for the `Graph` attribute.",
            "itemtype": "method",
            "name": "_getGraph",
            "return": {
                "description": "Graph"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 270,
            "description": "Returns a series instance by index or key value.",
            "itemtype": "method",
            "name": "getSeries",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "CartesianSeries"
            },
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 295,
            "description": "Returns an `Axis` instance by key reference. If the axis was explicitly set through the `axes` attribute,\nthe key will be the same as the key used in the `axes` object. For default axes, the key for\nthe category axis is the value of the `categoryKey` (`category`). For the value axis, the default \nkey is `values`.",
            "itemtype": "method",
            "name": "getAxisByKey",
            "params": [
                {
                    "name": "val",
                    "description": "Key reference used to look up the axis.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Axis"
            },
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 316,
            "description": "Returns the category axis for the chart.",
            "itemtype": "method",
            "name": "getCategoryAxis",
            "return": {
                "description": "Axis"
            },
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 334,
            "description": "Default direction of the chart.",
            "itemtype": "property",
            "name": "_direction",
            "type": "String",
            "default": "horizontal",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 344,
            "description": "Storage for the `dataProvider` attribute.",
            "itemtype": "property",
            "name": "_dataProvider",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 353,
            "description": "Setter method for `dataProvider` attribute.",
            "itemtype": "method",
            "name": "_setDataValues",
            "params": [
                {
                    "name": "val",
                    "description": "Array to be set as `dataProvider`.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 386,
            "description": "Storage for `seriesCollection` attribute.",
            "itemtype": "property",
            "name": "_seriesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 395,
            "description": "Setter method for `seriesCollection` attribute.",
            "itemtype": "property",
            "name": "_setSeriesCollection",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false,
            "subprops": [
                {
                    "name": "val",
                    "description": "Array of either `CartesianSeries` instances or objects containing series attribute key value pairs.",
                    "type": "Array"
                }
            ]
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 406,
            "description": "Helper method that returns the axis class that a key references.",
            "itemtype": "method",
            "name": "_getAxisClass",
            "params": [
                {
                    "name": "t",
                    "description": "The type of axis.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Axis"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 419,
            "description": "Key value pairs of axis types.",
            "itemtype": "property",
            "name": "_axisClass",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 433,
            "description": "Collection of axes.",
            "itemtype": "property",
            "name": "_axes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 442,
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 454,
            "itemtype": "method",
            "name": "renderUI",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 475,
            "description": "Creates an aria `live-region`, `aria-label` and `aria-describedby` for the Chart.",
            "itemtype": "method",
            "name": "_setAriaElements",
            "params": [
                {
                    "name": "cb",
                    "description": "Reference to the Chart's `contentBox` attribute.",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 505,
            "description": "Sets a node offscreen for use as aria-description or aria-live-regin.",
            "itemtype": "method",
            "name": "_setOffscreen",
            "return": {
                "description": "Node"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 525,
            "itemtype": "method",
            "name": "syncUI",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 534,
            "itemtype": "method",
            "name": "bindUI",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 646,
            "description": "Event handler for marker events.",
            "itemtype": "method",
            "name": "_markerEventDispatcher",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 678,
            "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseover event.",
            "itemtype": "event",
            "name": "markerEvent:mouseover",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n     <dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n     <dt>node</dt><dd>The dom node of the marker.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>series</dt><dd>Reference to the series of the marker.</dd>\n     <dt>index</dt><dd>Index of the marker in the series.</dd>\n     <dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 697,
            "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseout event.",
            "itemtype": "event",
            "name": "markerEvent:mouseout",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n     <dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n     <dt>node</dt><dd>The dom node of the marker.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>series</dt><dd>Reference to the series of the marker.</dd>\n     <dt>index</dt><dd>Index of the marker in the series.</dd>\n     <dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 715,
            "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mousedown event.",
            "itemtype": "event",
            "name": "markerEvent:mousedown",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n     <dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n     <dt>node</dt><dd>The dom node of the marker.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>series</dt><dd>Reference to the series of the marker.</dd>\n     <dt>index</dt><dd>Index of the marker in the series.</dd>\n     <dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 733,
            "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a mouseup event.",
            "itemtype": "event",
            "name": "markerEvent:mouseup",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n     <dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n     <dt>node</dt><dd>The dom node of the marker.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>series</dt><dd>Reference to the series of the marker.</dd>\n     <dt>index</dt><dd>Index of the marker in the series.</dd>\n     <dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 751,
            "description": "Broadcasts when `interactionType` is set to `marker` and a series marker has received a click event.",
            "itemtype": "event",
            "name": "markerEvent:click",
            "preventable": "false",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade with the following additional\n  properties:\n <dl>\n     <dt>categoryItem</dt><dd>Hash containing information about the category `Axis`.</dd>\n     <dt>valueItem</dt><dd>Hash containing information about the value `Axis`.</dd>\n     <dt>node</dt><dd>The dom node of the marker.</dd>\n     <dt>x</dt><dd>The x-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>y</dt><dd>The y-coordinate of the mouse in relation to the Chart.</dd>\n     <dt>pageX</dt><dd>The x location of the event on the page (including scroll)</dd>\n     <dt>pageY</dt><dd>The y location of the event on the page (including scroll)</dd>\n     <dt>series</dt><dd>Reference to the series of the marker.</dd>\n     <dt>index</dt><dd>Index of the marker in the series.</dd>\n     <dt>seriesIndex</dt><dd>The `order` of the marker's series.</dd>\n     <dt>originEvent</dt><dd>Underlying dom event.</dd>\n </dl>",
                    "type": "EventFacade"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 787,
            "description": "Event handler for dataProviderChange.",
            "itemtype": "method",
            "name": "_dataProviderChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 822,
            "description": "Event listener for toggling the tooltip. If a tooltip is visible, hide it. If not, it \nwill create and show a tooltip based on the event object.",
            "itemtype": "method",
            "name": "toggleTooltip",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 842,
            "description": "Shows a tooltip",
            "itemtype": "method",
            "name": "_showTooltip",
            "params": [
                {
                    "name": "msg",
                    "description": "Message to dispaly in the tooltip.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 865,
            "description": "Positions the tooltip",
            "itemtype": "method",
            "name": "_positionTooltip",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 886,
            "description": "Hides the default tooltip",
            "itemtype": "method",
            "name": "hideTooltip",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 902,
            "description": "Adds a tooltip to the dom.",
            "itemtype": "method",
            "name": "_addTooltip",
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 923,
            "description": "Updates the tooltip attribute.",
            "itemtype": "method",
            "name": "_updateTooltip",
            "params": [
                {
                    "name": "val",
                    "description": "Object containing properties for the tooltip.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 973,
            "description": "Default getter for `tooltip` attribute.",
            "itemtype": "method",
            "name": "_getTooltip",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 1025,
            "description": "Formats tooltip text when `interactionType` is `planar`.",
            "itemtype": "method",
            "name": "_planarLabelFunction",
            "params": [
                {
                    "name": "categoryAxis",
                    "description": "Reference to the categoryAxis of the chart.",
                    "type": "Axis"
                },
                {
                    "name": "valueItems",
                    "description": "Array of objects for each series that has a data point in the coordinate plane of the event. Each object contains the following data:\n <dl>\n     <dt>axis</dt><dd>The value axis of the series.</dd>\n     <dt>key</dt><dd>The key for the series.</dd>\n     <dt>value</dt><dd>The value for the series item.</dd>\n     <dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n </dl>",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "The index of the item within its series.",
                    "type": "Number"
                },
                {
                    "name": "seriesArray",
                    "description": "Array of series instances for each value item.",
                    "type": "Array"
                },
                {
                    "name": "seriesIndex",
                    "description": "The index of the series in the `seriesCollection`.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String | HTML"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 1084,
            "description": "Formats tooltip text when `interactionType` is `marker`.",
            "itemtype": "method",
            "name": "_tooltipLabelFunction",
            "params": [
                {
                    "name": "categoryItem",
                    "description": "An object containing the following:\n <dl>\n     <dt>axis</dt><dd>The axis to which the category is bound.</dd>\n     <dt>displayName</dt><dd>The display name set to the category (defaults to key if not provided)</dd>\n     <dt>key</dt><dd>The key of the category.</dd>\n     <dt>value</dt><dd>The value of the category</dd>\n </dl>",
                    "type": "Object"
                },
                {
                    "name": "valueItem",
                    "description": "An object containing the following:\n <dl>\n     <dt>axis</dt><dd>The axis to which the item's series is bound.</dd>\n     <dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n     <dt>key</dt><dd>The key for the series.</dd>\n     <dt>value</dt><dd>The value for the series item.</dd> \n </dl>",
                    "type": "Object"
                },
                {
                    "name": "itemIndex",
                    "description": "The index of the item within the series.",
                    "type": "Number"
                },
                {
                    "name": "series",
                    "description": "The `CartesianSeries` instance of the item.",
                    "type": "CartesianSeries"
                },
                {
                    "name": "seriesIndex",
                    "description": "The index of the series in the `seriesCollection`.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String | HTML"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 1131,
            "description": "Event handler for the tooltipChange.",
            "itemtype": "method",
            "name": "_tooltipChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartBase.js",
            "line": 1156,
            "description": "Updates the content of text field. This method writes a value into a text field using \n`appendChild`. If the value is a `String`, it is converted to a `TextNode` first.",
            "itemtype": "method",
            "name": "_setText",
            "params": [
                {
                    "name": "label",
                    "description": "label to be updated",
                    "type": "HTMLElement"
                },
                {
                    "name": "val",
                    "description": "value with which to update the label",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartBase",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 10,
            "description": "Initializes the chart.",
            "itemtype": "method",
            "name": "initializer",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 21,
            "itemtype": "method",
            "name": "renderUI",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 40,
            "itemtype": "method",
            "name": "bindUI",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 53,
            "itemtype": "method",
            "name": "syncUI",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 67,
            "description": "Handles changes to legend.",
            "itemtype": "method",
            "name": "_updateHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 82,
            "description": "Handles position changes.",
            "itemtype": "method",
            "name": "_positionChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 103,
            "description": "Updates the legend when the size changes.",
            "itemtype": "method",
            "name": "_handleSizeChange",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 122,
            "description": "Draws the legend",
            "itemtype": "method",
            "name": "_drawLegend",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 256,
            "description": "Updates the background for the legend.",
            "itemtype": "method",
            "name": "_updateBackground",
            "params": [
                {
                    "name": "styles",
                    "description": "Reference to the legend's styles attribute",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 282,
            "description": "Retrieves the marker styles based on the type of series. For series that contain a marker, the marker styles are returned.",
            "itemtype": "method",
            "name": "_getStylesBySeriesType",
            "params": [
                {
                    "name": "The",
                    "description": "series in which the style properties will be received.",
                    "type": "CartesianSeries | PieSeries"
                }
            ],
            "return": {
                "description": "Object An object containing fill, border and shape information."
            },
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 337,
            "description": "Returns a legend item consisting of the following properties:\n <dl>\n   <dt>node</dt><dd>The `Node` containing the legend item elements.</dd>\n     <dt>shape</dt><dd>The `Shape` element for the legend item.</dd>\n     <dt>textNode</dt><dd>The `Node` containing the text></dd>\n     <dt>text</dt><dd></dd>\n </dl>",
            "itemtype": "method",
            "name": "_getLegendItem",
            "params": [
                {
                    "name": "shapeProps",
                    "description": "Reference to the `node` attribute.",
                    "type": "Node"
                },
                {
                    "name": "shapeClass",
                    "description": "The type of shape",
                    "type": "String | Class"
                },
                {
                    "name": "fill",
                    "description": "Properties for the shape's fill",
                    "type": "Object"
                },
                {
                    "name": "border",
                    "description": "Properties for the shape's border",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "String to be rendered as the legend's text",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "Total width of the legend item",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Total height of the legend item",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "Text for the legendItem",
                    "type": "HTML | String"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 403,
            "description": "Evaluates and returns correct class for drawing a shape.",
            "itemtype": "method",
            "name": "_getShapeClass",
            "return": {
                "description": "Shape"
            },
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 416,
            "description": "Returns the default hash for the `styles` attribute.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 458,
            "description": "Gets the default values for series that use the utility. This method is used by\nthe class' `styles` attribute's getter to get build default values.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 475,
            "description": "Destroys legend items.",
            "itemtype": "method",
            "name": "_destroyLegendItems",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 498,
            "description": "Maps layout classes.",
            "itemtype": "property",
            "name": "_layout",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 509,
            "description": "Destructor implementation ChartLegend class. Removes all items and the Graphic instance from the widget.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 526,
            "description": "Indicates whether the chart's contentBox is the parentNode for the legend.",
            "itemtype": "attribute",
            "name": "includeInChartLayout",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 537,
            "description": "Reference to the `Chart` instance.",
            "itemtype": "attribute",
            "name": "chart",
            "type": "Chart",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 551,
            "description": "Indicates the direction in relation of the legend's layout. The `direction` of the legend is determined by its\n`position` value.",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 562,
            "description": "Indicates the position and direction of the legend. Possible values are `left`, `top`, `right` and `bottom`. Values of `left` and\n`right` values have a `direction` of `vertical`. Values of `top` and `bottom` values have a `direction` of `horizontal`.",
            "itemtype": "attribute",
            "name": "position",
            "type": "String",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 588,
            "description": "The width of the legend. Depending on the implementation of the ChartLegend, this value is `readOnly`. By default, the legend is included in the layout of the `Chart` that \nit references. Under this circumstance, `width` is always `readOnly`. When the legend is rendered in its own dom element, the `readOnly` status is determined by the \ndirection of the legend. If the `position` is `left` or `right` or the `direction` is `vertical`, width is `readOnly`. If the position is `top` or `bottom` or the `direction`\nis `horizontal`, width can be explicitly set. If width is not explicitly set, the width will be determined by the width of the legend's parent element.",
            "itemtype": "attribute",
            "name": "width",
            "type": "Number",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 627,
            "description": "The height of the legend. Depending on the implementation of the ChartLegend, this value is `readOnly`. By default, the legend is included in the layout of the `Chart` that \nit references. Under this circumstance, `height` is always `readOnly`. When the legend is rendered in its own dom element, the `readOnly` status is determined by the \ndirection of the legend. If the `position` is `top` or `bottom` or the `direction` is `horizontal`, height is `readOnly`. If the position is `left` or `right` or the `direction`\nis `vertical`, height can be explicitly set. If height is not explicitly set, the height will be determined by the width of the legend's parent element.",
            "itemtype": "attribute",
            "name": "height",
            "type": "Number",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 668,
            "description": "Indicates the x position of legend.",
            "itemtype": "attribute",
            "name": "x",
            "type": "Number",
            "readonly": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 691,
            "description": "Indicates the y position of legend.",
            "itemtype": "attribute",
            "name": "y",
            "type": "Number",
            "readonly": "",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 714,
            "description": "Background for the legend.",
            "itemtype": "attribute",
            "name": "background",
            "type": "Rect",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/ChartLegend.js",
            "line": 722,
            "description": "Properties used to display and style the ChartLegend.  This attribute is inherited from `Renderer`. Below are the default values:\n\n <dl>\n     <dt>gap</dt><dd>Distance, in pixels, between the `ChartLegend` instance and the chart's content. When `ChartLegend` is rendered within a `Chart` instance this value is applied.</dd>\n     <dt>hAlign</dt><dd>Defines the horizontal alignment of the `items` in a `ChartLegend` rendered in a horizontal direction. This value is applied when the instance's `position` is set to top or bottom. This attribute can be set to left, center or right. The default value is center.</dd>\n     <dt>vAlign</dt><dd>Defines the vertical alignment of the `items` in a `ChartLegend` rendered in vertical direction. This value is applied when the instance's `position` is set to left or right. The attribute can be set to top, middle or bottom. The default value is middle.</dd>\n     <dt>item</dt><dd>Set of style properties applied to the `items` of the `ChartLegend`.\n         <dl>\n             <dt>hSpacing</dt><dd>Horizontal distance, in pixels, between legend `items`.</dd>\n             <dt>vSpacing</dt><dd>Vertical distance, in pixels, between legend `items`.</dd>\n             <dt>label</dt><dd>Properties for the text of an `item`.\n                 <dl>\n                     <dt>color</dt><dd>Color of the text. The default values is \"#808080\".</dd>\n                     <dt>fontSize</dt><dd>Font size for the text. The default value is \"85%\".</dd>\n                 </dl>\n             </dd>\n             <dt>marker</dt><dd>Properties for the `item` markers.\n                 <dl>\n                     <dt>width</dt><dd>Specifies the width of the markers.</dd>\n                     <dt>height</dt><dd>Specifies the height of the markers.</dd>\n                 </dl>\n             </dd>\n         </dl>\n     </dd>\n     <dt>background</dt><dd>Properties for the `ChartLegend` background.\n         <dl>\n             <dt>fill</dt><dd>Properties for the background fill.\n                 <dl>\n                     <dt>color</dt><dd>Color for the fill. The default value is \"#faf9f2\".</dd>\n                 </dl>\n             </dd>\n             <dt>border</dt><dd>Properties for the background border.\n                 <dl>\n                     <dt>color</dt><dd>Color for the border. The default value is \"#dad8c9\".</dd>\n                     <dt>weight</dt><dd>Weight of the border. The default values is 1.</dd>\n                 </dl>\n             </dd>\n         </dl>\n     </dd>\n</dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "ChartLegend",
            "module": "charts",
            "_global": false,
            "submodule": "charts-legend"
        },
        {
            "file": "tests/input/charts/CircleGroup.js",
            "line": 16,
            "description": "Algorithm for drawing shape.",
            "itemtype": "method",
            "name": "drawShape",
            "params": [
                {
                    "name": "cfg",
                    "description": "Parameters used to draw the shape.",
                    "type": "Object"
                }
            ],
            "class": "GroupCircle",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/ColumnSeries.js",
            "line": 13,
            "description": "Helper method for calculating the size of markers.",
            "itemtype": "method",
            "name": "_getMarkerDimensions",
            "params": [
                {
                    "name": "xcoord",
                    "description": "The x-coordinate representing the data point for the marker.",
                    "type": "Number"
                },
                {
                    "name": "ycoord",
                    "description": "The y-coordinate representing the data point for the marker.",
                    "type": "Number"
                },
                {
                    "name": "calculatedSize",
                    "description": "The calculated size for the marker. For a `BarSeries` is it the width. For a `ColumnSeries` it is the height.",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "Distance of position offset dictated by other marker series in the same graph.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "ColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ColumnSeries.js",
            "line": 42,
            "description": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ColumnSeries.js",
            "line": 106,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "readonly": "",
            "default": "column",
            "class": "ColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ColumnSeries.js",
            "line": 118,
            "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>width</dt><dd>indicates the width of the marker. The default value is 12.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "ColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 15,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 38,
            "description": "Toggles visibility",
            "itemtype": "method",
            "name": "_toggleVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "indicates visibilitye",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 78,
            "access": "protected",
            "tagname": "Returns the default hash for the `styles` attribute.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 97,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "combo",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 108,
            "description": "Indicates whether a fill is displayed.",
            "itemtype": "attribute",
            "name": "showAreaFill",
            "type": "Boolean",
            "default": "false",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 119,
            "description": "Indicates whether lines are displayed.",
            "itemtype": "attribute",
            "name": "showLines",
            "type": "Boolean",
            "default": "true",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 130,
            "description": "Indicates whether markers are displayed.",
            "itemtype": "attribute",
            "name": "showMarkers",
            "type": "Boolean",
            "default": "true",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 141,
            "description": "Reference to the styles of the markers. These styles can also\nbe accessed through the `styles` attribute. Below are default\nvalues:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#6084d0\", \"#eeb647\", \"#6c6b5f\", \"#d6484f\", \"#ce9ed1\", \"#ff9f3b\", \"#93b7ff\", \"#e0ddd0\", \"#94ecba\", \"#309687\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>width</dt><dd>indicates the width of the marker. The default value is 10.</dd>\n     <dt>height</dt><dd>indicates the height of the marker The default value is 10.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "marker",
            "type": "Object",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 186,
            "description": "Reference to the styles of the lines. These styles can also be accessed through the `styles` attribute.\nBelow are the default values:\n <dl>\n     <dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\n     retrieved from the following array: \n     `[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n     <dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n     <dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n     <dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n     <dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n     <dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n     <dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "line",
            "type": "Object",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 219,
            "description": "Reference to the styles of the area fills. These styles can also be accessed through the `styles` attribute.\nBelow are the default values:\n\n <dl>\n     <dt>color</dt><dd>The color of the fill. The default value is determined by the order of the series on the graph. The color will be \n     retrieved from the following array:\n     `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n     </dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the fill. The default value is 1</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "area",
            "type": "Object",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSeries.js",
            "line": 246,
            "description": "Style properties for the series. Contains a key indexed hash of the following:\n <dl>\n     <dt>marker</dt><dd>Style properties for the markers in the series. Specific style attributes are listed\n     <a href=\"#attr_marker\">here</a>.</dd>\n     <dt>line</dt><dd>Style properties for the lines in the series. Specific\n     style attributes are listed <a href=\"#attr_line\">here</a>.</dd>\n     <dt>area</dt><dd>Style properties for the area fills in the series. Specific style attributes are listed\n     <a href=\"#attr_area\">here</a>.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "ComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSplineSeries.js",
            "line": 13,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "ComboSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ComboSplineSeries.js",
            "line": 37,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "comboSpline",
            "class": "ComboSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CurveUtil.js",
            "line": 13,
            "description": "Creates an array of start, end and control points for splines.",
            "itemtype": "method",
            "name": "getCurveControlPoints",
            "params": [
                {
                    "name": "xcoords",
                    "description": "Collection of x-coordinates used for calculate the curves",
                    "type": "Array"
                },
                {
                    "name": "ycoords",
                    "description": "Collection of y-coordinates used for calculate the curves",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "CurveUtil",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/CurveUtil.js",
            "line": 88,
            "description": "Gets the control points for the curve.",
            "itemtype": "method",
            "name": "getControlPoints",
            "params": [
                {
                    "name": "vals",
                    "description": "Collection of values coords used to generate control points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "CurveUtil",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/DiamondGroup.js",
            "line": 16,
            "description": "Updates the diamond.",
            "itemtype": "method",
            "name": "_draw",
            "access": "private",
            "tagname": "",
            "class": "GroupDiamond",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/EllipseGroup.js",
            "line": 16,
            "description": "Updates the diamond.",
            "itemtype": "method",
            "name": "_draw",
            "access": "private",
            "tagname": "",
            "class": "EllipseGroup",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 29,
            "description": "Returns a path shape used for drawing fills.",
            "itemtype": "method",
            "name": "_getPath",
            "return": {
                "description": "Path"
            },
            "access": "private",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 47,
            "description": "Toggles visibility",
            "itemtype": "method",
            "name": "_toggleVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "indicates visibilitye",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 62,
            "description": "Draws fill",
            "itemtype": "method",
            "name": "drawFill",
            "params": [
                {
                    "name": "xcoords",
                    "description": "The x-coordinates for the series.",
                    "type": "Array"
                },
                {
                    "name": "ycoords",
                    "description": "The y-coordinates for the series.",
                    "type": "Array"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 111,
            "description": "Draws a fill for a spline",
            "itemtype": "method",
            "name": "drawAreaSpline",
            "access": "protected",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 169,
            "description": "Draws a a stacked area spline",
            "itemtype": "method",
            "name": "drawStackedAreaSpline",
            "access": "protected",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 260,
            "description": "Storage for default area styles.",
            "itemtype": "property",
            "name": "_defaults",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 269,
            "description": "Concatenates coordinate array with correct coordinates for closing an area fill.",
            "itemtype": "method",
            "name": "_getClosingPoints",
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 299,
            "description": "Concatenates coordinate array with the correct coordinates for closing an area stack.",
            "itemtype": "method",
            "name": "_getStackedClosingPoints",
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Fills.js",
            "line": 349,
            "description": "Returns default values for area styles.",
            "itemtype": "method",
            "name": "_getAreaDefaults",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Fills",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 12,
            "itemtype": "method",
            "name": "bindUI",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 25,
            "itemtype": "method",
            "name": "syncUI",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 71,
            "description": "Object of arrays containing series mapped to a series type.",
            "itemtype": "property",
            "name": "seriesTypes",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 80,
            "description": "Returns a series instance based on an index.",
            "itemtype": "method",
            "name": "getSeriesByIndex",
            "params": [
                {
                    "name": "val",
                    "description": "index of the series",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "CartesianSeries"
            },
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 98,
            "description": "Returns a series instance based on a key value.",
            "itemtype": "method",
            "name": "getSeriesByKey",
            "params": [
                {
                    "name": "val",
                    "description": "key value of the series",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CartesianSeries"
            },
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 116,
            "description": "Adds dispatcher to a `_dispatcher` used to\nto ensure all series have redrawn before for firing event.",
            "itemtype": "method",
            "name": "addDispatcher",
            "params": [
                {
                    "name": "val",
                    "description": "series instance to add",
                    "type": "CartesianSeries"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 133,
            "description": "Collection of series to be displayed in the graph.",
            "itemtype": "property",
            "name": "_seriesCollection",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 142,
            "description": "Object containing key value pairs of `CartesianSeries` instances.",
            "itemtype": "property",
            "name": "_seriesDictionary",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 151,
            "description": "Parses series instances to be displayed in the graph.",
            "itemtype": "method",
            "name": "_parseSeriesCollection",
            "params": [
                {
                    "name": "Collection",
                    "description": "of `CartesianSeries` instances or objects container `CartesianSeries` attributes values.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 199,
            "description": "Adds a series to the graph.",
            "itemtype": "method",
            "name": "_addSeries",
            "params": [
                {
                    "name": "series",
                    "description": "Series to add to the graph.",
                    "type": "CartesianSeries"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 231,
            "description": "Creates a `CartesianSeries` instance from an object containing attribute key value pairs. The key value pairs include attributes for the specific series and a type value which defines the type of\nseries to be used.",
            "itemtype": "method",
            "name": "createSeries",
            "params": [
                {
                    "name": "seriesData",
                    "description": "Series attribute key value pairs.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 264,
            "description": "String reference for pre-defined `Series` classes.",
            "itemtype": "property",
            "name": "_seriesMap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 295,
            "description": "Returns a specific `CartesianSeries` class based on key value from a look up table of a direct reference to a class. When specifying a key value, the following options\nare available:\n\n <table>\n     <tr><th>Key Value</th><th>Class</th></tr>\n     <tr><td>line</td><td>Y.LineSeries</td></tr>    \n     <tr><td>column</td><td>Y.ColumnSeries</td></tr>    \n     <tr><td>bar</td><td>Y.BarSeries</td></tr>    \n     <tr><td>area</td><td>Y.AreaSeries</td></tr>    \n     <tr><td>stackedarea</td><td>Y.StackedAreaSeries</td></tr>    \n     <tr><td>stackedline</td><td>Y.StackedLineSeries</td></tr>    \n     <tr><td>stackedcolumn</td><td>Y.StackedColumnSeries</td></tr>    \n     <tr><td>stackedbar</td><td>Y.StackedBarSeries</td></tr>    \n     <tr><td>markerseries</td><td>Y.MarkerSeries</td></tr>    \n     <tr><td>spline</td><td>Y.SplineSeries</td></tr>    \n     <tr><td>areaspline</td><td>Y.AreaSplineSeries</td></tr>    \n     <tr><td>stackedspline</td><td>Y.StackedSplineSeries</td></tr>\n     <tr><td>stackedareaspline</td><td>Y.StackedAreaSplineSeries</td></tr>\n     <tr><td>stackedmarkerseries</td><td>Y.StackedMarkerSeries</td></tr>\n     <tr><td>pie</td><td>Y.PieSeries</td></tr>\n     <tr><td>combo</td><td>Y.ComboSeries</td></tr>\n     <tr><td>stackedcombo</td><td>Y.StackedComboSeries</td></tr>\n     <tr><td>combospline</td><td>Y.ComboSplineSeries</td></tr>\n     <tr><td>stackedcombospline</td><td>Y.StackedComboSplineSeries</td></tr>\n </table>\n\nWhen referencing a class directly, you can specify any of the above classes or any custom class that extends `CartesianSeries` or `PieSeries`.",
            "itemtype": "method",
            "name": "_getSeries",
            "params": [
                {
                    "name": "type",
                    "description": "Series type.",
                    "type": "String | Object"
                }
            ],
            "return": {
                "description": "CartesianSeries"
            },
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 343,
            "description": "Event handler for marker events.",
            "itemtype": "method",
            "name": "_markerEventHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 360,
            "description": "Collection of `CartesianSeries` instances to be redrawn.",
            "itemtype": "property",
            "name": "_dispatchers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 369,
            "description": "Updates the `Graph` styles.",
            "itemtype": "method",
            "name": "_updateStyles",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 386,
            "description": "Event handler for size changes.",
            "itemtype": "method",
            "name": "_sizeChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 430,
            "description": "Draws each series.",
            "itemtype": "method",
            "name": "_drawSeries",
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 469,
            "description": "Event handler for series drawingComplete event.",
            "itemtype": "method",
            "name": "_drawingCompleteHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 496,
            "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 521,
            "description": "Destructor implementation Graph class. Removes all Graphic instances from the widget.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 544,
            "description": "The x-coordinate for the graph.",
            "itemtype": "attribute",
            "name": "x",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 559,
            "description": "The y-coordinate for the graph.",
            "itemtype": "attribute",
            "name": "y",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 574,
            "description": "Reference to the chart instance using the graph.",
            "itemtype": "attribute",
            "name": "chart",
            "type": "ChartBase",
            "readonly": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 583,
            "description": "Collection of series. When setting the `seriesCollection` the array can contain a combination of either\n`CartesianSeries` instances or object literals with properties that will define a series.",
            "itemtype": "attribute",
            "name": "seriesCollection",
            "type": "CartesianSeries",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 603,
            "description": "Indicates whether the `Graph` has a background.",
            "itemtype": "attribute",
            "name": "showBackground",
            "type": "Boolean",
            "default": "true",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 614,
            "description": "Read-only hash lookup for all series on in the `Graph`.",
            "itemtype": "attribute",
            "name": "seriesDictionary",
            "type": "Object",
            "readonly": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 630,
            "description": "Reference to the horizontal `Gridlines` instance.",
            "itemtype": "attribute",
            "name": "horizontalGridlines",
            "type": "Gridlines",
            "default": "null",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 661,
            "description": "Reference to the vertical `Gridlines` instance.",
            "itemtype": "attribute",
            "name": "verticalGridlines",
            "type": "Gridlines",
            "default": "null",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 692,
            "description": "Reference to graphic instance used for the background.",
            "itemtype": "attribute",
            "name": "background",
            "type": "Graphic",
            "readonly": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 712,
            "description": "Reference to graphic instance used for gridlines.",
            "itemtype": "attribute",
            "name": "gridlines",
            "type": "Graphic",
            "readonly": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 734,
            "description": "Reference to graphic instance used for series.",
            "itemtype": "attribute",
            "name": "graphic",
            "type": "Graphic",
            "readonly": "",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 756,
            "description": "Indicates whether or not markers for a series will be grouped and rendered in a single complex shape instance.",
            "itemtype": "attribute",
            "name": "groupMarkers",
            "type": "Boolean",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Graph.js",
            "line": 766,
            "description": "Style properties used for drawing a background. Below are the default values:\n <dl>\n     <dt>background</dt><dd>An object containing the following values:\n         <dl>\n             <dt>fill</dt><dd>Defines the style properties for the fill. Contains the following values:\n                 <dl>\n                     <dt>color</dt><dd>Color of the fill. The default value is #faf9f2.</dd>\n                     <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background fill. The default value is 1.</dd>\n                 </dl>\n             </dd>\n             <dt>border</dt><dd>Defines the style properties for the border. Contains the following values:\n                 <dl>\n                     <dt>color</dt><dd>Color of the border. The default value is #dad8c9.</dd>\n                     <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the background border. The default value is 1.</dd>\n                     <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n                 </dl>\n             </dd>\n         </dl>\n     </dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "Graph",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 11,
            "description": "Reference to the `Path` element used for drawing Gridlines.",
            "itemtype": "property",
            "name": "_path",
            "type": "Path",
            "access": "private",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 20,
            "description": "Removes the Gridlines.",
            "itemtype": "method",
            "name": "remove",
            "access": "private",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 35,
            "description": "Draws the gridlines",
            "itemtype": "method",
            "name": "draw",
            "access": "protected",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 49,
            "description": "Algorithm for drawing gridlines",
            "itemtype": "method",
            "name": "_drawGridlines",
            "access": "private",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 108,
            "description": "Algorithm for horizontal lines.",
            "itemtype": "method",
            "name": "_horizontalLine",
            "params": [
                {
                    "name": "path",
                    "description": "Reference to path element",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "Coordinates corresponding to a major unit of an axis.",
                    "type": "Object"
                },
                {
                    "name": "w",
                    "description": "Width of the Graph",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the Graph",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 124,
            "description": "Algorithm for vertical lines.",
            "itemtype": "method",
            "name": "_verticalLine",
            "params": [
                {
                    "name": "path",
                    "description": "Reference to path element",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "Coordinates corresponding to a major unit of an axis.",
                    "type": "Object"
                },
                {
                    "name": "w",
                    "description": "Width of the Graph",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the Graph",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 140,
            "description": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 163,
            "description": "Indicates the direction of the gridline.",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 171,
            "description": "Indicate the `Axis` in which to bind\nthe gridlines.",
            "itemtype": "attribute",
            "name": "axis",
            "type": "Axis",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Gridlines.js",
            "line": 180,
            "description": "Indicates the `Graph` in which the gridlines \nare drawn.",
            "itemtype": "attribute",
            "name": "graph",
            "type": "Graph",
            "class": "Gridlines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Histogram.js",
            "line": 11,
            "description": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "access": "protected",
            "tagname": "",
            "class": "Histogram",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Histogram.js",
            "line": 172,
            "description": "Collection of default colors used for marker fills in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultFillColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "Histogram",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Histogram.js",
            "line": 181,
            "description": "Gets the default style values for the markers.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Histogram",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 11,
            "description": "Default margins for text fields.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getDefaultMargins",
            "return": {
                "description": "Object"
            },
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 28,
            "description": "Sets the length of the tick on either side of the axis line.",
            "itemtype": "method",
            "name": "setTickOffset",
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 65,
            "description": "Draws a tick",
            "itemtype": "method",
            "name": "drawTick",
            "params": [
                {
                    "name": "path",
                    "description": "reference to the path `Path` element in which to draw the tick.",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "Point on the axis in which the tick will intersect.",
                    "type": "Object"
                },
                {
                    "name": "tickStyle",
                    "description": "Hash of properties to apply to the tick.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 85,
            "description": "Calculates the coordinates for the first point on an axis.",
            "itemtype": "method",
            "name": "getLineStart",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 111,
            "description": "Calculates the point for a label.",
            "itemtype": "method",
            "name": "getLabelPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point on the axis in which the tick will intersect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 124,
            "description": "Updates the value for the `maxLabelSize` for use in calculating total size.",
            "itemtype": "method",
            "name": "updateMaxLabelSize",
            "params": [
                {
                    "name": "label",
                    "description": "to measure",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 155,
            "description": "Determines the available label width when the axis width has been explicitly set.",
            "itemtype": "method",
            "name": "getExplicitlySized",
            "return": {
                "description": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 177,
            "description": "Rotate and position title.",
            "itemtype": "method",
            "name": "positionTitle",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 207,
            "description": "Rotate and position labels.",
            "itemtype": "method",
            "name": "positionLabel",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                },
                {
                    "name": "pt",
                    "description": "hash containing the x and y coordinates in which the label will be positioned\nagainst.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 255,
            "description": "Adjusts the coordinates of an axis label based on the rotation.",
            "itemtype": "method",
            "name": "_setRotationCoords",
            "params": [
                {
                    "name": "props",
                    "description": "Coordinates, dimension and rotation properties of the label.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 294,
            "description": "Returns the transformOrigin to use for an axis label based on the position of the axis \nand the rotation of the label.",
            "itemtype": "method",
            "name": "_getTransformOrigin",
            "params": [
                {
                    "name": "rot",
                    "description": "The rotation (in degrees) of the label.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 325,
            "description": "Adjust the position of the Axis widget's content box for internal axes.",
            "itemtype": "method",
            "name": "offsetNodeForTick",
            "params": [
                {
                    "name": "cb",
                    "description": "Content box of the Axis.",
                    "type": "Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LeftAxisLayout.js",
            "line": 336,
            "description": "Sets the width of the axis based on its contents.",
            "itemtype": "method",
            "name": "setCalculatedSize",
            "access": "protected",
            "tagname": "",
            "class": "LeftAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LineSeries.js",
            "line": 11,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "LineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LineSeries.js",
            "line": 21,
            "access": "protected",
            "tagname": "Method used by `styles` setter. Overrides base implementation.",
            "itemtype": "method",
            "name": "_setStyles",
            "params": [
                {
                    "name": "newStyles",
                    "description": "Hash of properties to update.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "LineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LineSeries.js",
            "line": 39,
            "access": "protected",
            "tagname": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "class": "LineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LineSeries.js",
            "line": 56,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "line",
            "class": "LineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/LineSeries.js",
            "line": 67,
            "description": "Style properties used for drawing lines. This attribute is inherited from `Renderer`. Below are the default values:\n <dl>\n     <dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\n     retrieved from the following array: \n     `[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n     <dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n     <dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n     <dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n     <dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n     <dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n     <dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "LineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 11,
            "itemtype": "property",
            "name": "_lineDefaults",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 18,
            "description": "Creates a graphic in which to draw a series.",
            "itemtype": "method",
            "name": "_getGraphic",
            "return": {
                "description": "Graphic"
            },
            "access": "private",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 36,
            "description": "Toggles visibility",
            "itemtype": "method",
            "name": "_toggleVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "indicates visibilitye",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 51,
            "description": "Draws lines for the series.",
            "itemtype": "method",
            "name": "drawLines",
            "access": "protected",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 144,
            "description": "Connects data points with a consistent curve for a series.",
            "itemtype": "method",
            "name": "drawSpline",
            "access": "protected",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 190,
            "description": "Draws a dashed line between two points.",
            "itemtype": "method",
            "name": "drawDashedLine",
            "params": [
                {
                    "name": "xStart",
                    "description": "The x position of the start of the line",
                    "type": "Number"
                },
                {
                    "name": "yStart",
                    "description": "The y position of the start of the line",
                    "type": "Number"
                },
                {
                    "name": "xEnd",
                    "description": "The x position of the end of the line",
                    "type": "Number"
                },
                {
                    "name": "yEnd",
                    "description": "The y position of the end of the line",
                    "type": "Number"
                },
                {
                    "name": "dashSize",
                    "description": "the size of dashes, in pixels",
                    "type": "Number"
                },
                {
                    "name": "gapSize",
                    "description": "the size of gaps between dashes, in pixels",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Lines.js",
            "line": 241,
            "description": "Default values for `styles` attribute.",
            "itemtype": "method",
            "name": "_getLineDefaults",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Lines",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "MarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 24,
            "access": "protected",
            "tagname": "Method used by `styles` setter. Overrides base implementation.",
            "itemtype": "method",
            "name": "_setStyles",
            "params": [
                {
                    "name": "newStyles",
                    "description": "Hash of properties to update.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "MarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 43,
            "access": "protected",
            "tagname": "Gets the default value for the `styles` attribute. Overrides\nbase implementation.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "class": "MarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 59,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "marker",
            "class": "MarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/MarkerSeries.js",
            "line": 70,
            "description": "Style properties used for drawing markers. This attribute is inherited from `Renderer`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#6084d0\", \"#eeb647\", \"#6c6b5f\", \"#d6484f\", \"#ce9ed1\", \"#ff9f3b\", \"#93b7ff\", \"#e0ddd0\", \"#94ecba\", \"#309687\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>width</dt><dd>indicates the width of the marker. The default value is 10.</dd>\n     <dt>height</dt><dd>indicates the height of the marker The default value is 10.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "MarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 18,
            "description": "Indicates whether 0 should always be displayed.",
            "itemtype": "attribute",
            "name": "alwaysShowZero",
            "type": "Boolean",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 28,
            "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String` or an `HTMLElement`. The default implementation of the method returns a `String`. The output of this method\nwill be rendered to the DOM using `appendChild`. If you override the `labelFunction` method and return an html string, you will also need to override the Axis' \n`appendLabelFunction` to accept html as a `String`.\n<dl>\n     <dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n     <dt>format</dt><dd>Object containing properties used to format the label. (optional)</dd>\n</dl>",
            "itemtype": "attribute",
            "name": "labelFunction",
            "type": "Function",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 52,
            "description": "Object containing properties used by the `labelFunction` to format a\nlabel.",
            "itemtype": "attribute",
            "name": "labelFormat",
            "type": "Object",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 72,
            "description": "Formats a label based on the axis type and optionally specified format.",
            "itemtype": "method",
            "name": "formatLabel",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "format",
                    "description": "Pattern used to format the value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 89,
            "description": "Returns the sum of all values per key.",
            "itemtype": "method",
            "name": "getTotalByKey",
            "params": [
                {
                    "name": "key",
                    "description": "The identifier for the array whose values will be calculated.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Number"
            },
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 114,
            "description": "Type of data used in `Axis`.",
            "itemtype": "property",
            "name": "_type",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 123,
            "description": "Helper method for getting a `roundingUnit` when calculating the minimum and maximum values.",
            "itemtype": "method",
            "name": "_getMinimumUnit",
            "params": [
                {
                    "name": "max",
                    "description": "Maximum number",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "Minimum number",
                    "type": "Number"
                },
                {
                    "name": "units",
                    "description": "Number of units on the axis",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 138,
            "description": "Calculates a nice rounding unit based on the range.",
            "itemtype": "method",
            "name": "_getNiceNumber",
            "params": [
                {
                    "name": "roundingUnit",
                    "description": "The calculated rounding unit.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 170,
            "description": "Calculates the maximum and minimum values for the `Axis`.",
            "itemtype": "method",
            "name": "_updateMinAndMax",
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 248,
            "description": "Rounds the mimimum and maximum values based on the `roundingUnit` attribute.",
            "itemtype": "method",
            "name": "_roundMinAndMax",
            "params": [
                {
                    "name": "min",
                    "description": "Minimum value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Maximum value",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 535,
            "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.",
            "itemtype": "method",
            "name": "getLabelByIndex",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the label.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Total number of labels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 573,
            "description": "Rounds a Number to the nearest multiple of an input. For example, by rounding\n16 to the nearest 10, you will receive 20. Similar to the built-in function Math.round().",
            "itemtype": "method",
            "name": "_roundToNearest",
            "params": [
                {
                    "name": "number",
                    "description": "Number to round",
                    "type": "Number"
                },
                {
                    "name": "nearest",
                    "description": "Multiple to round towards.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 594,
            "description": "Rounds a Number up to the nearest multiple of an input. For example, by rounding\n16 up to the nearest 10, you will receive 20. Similar to the built-in function Math.ceil().",
            "itemtype": "method",
            "name": "_roundUpToNearest",
            "params": [
                {
                    "name": "number",
                    "description": "Number to round",
                    "type": "Number"
                },
                {
                    "name": "nearest",
                    "description": "Multiple to round towards.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 614,
            "description": "Rounds a Number down to the nearest multiple of an input. For example, by rounding\n16 down to the nearest 10, you will receive 10. Similar to the built-in function Math.floor().",
            "itemtype": "method",
            "name": "_roundDownToNearest",
            "params": [
                {
                    "name": "number",
                    "description": "Number to round",
                    "type": "Number"
                },
                {
                    "name": "nearest",
                    "description": "Multiple to round towards.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 634,
            "description": "Rounds a number to a certain level of precision. Useful for limiting the number of\ndecimal places on a fractional number.",
            "itemtype": "method",
            "name": "_roundToPrecision",
            "params": [
                {
                    "name": "number",
                    "description": "Number to round",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "Multiple to round towards.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/NumericAxis.js",
            "line": 651,
            "description": "Checks to see if data extends beyond the range of the axis. If so,\nthat data will need to be hidden. This method is internal, temporary and subject\nto removal in the future.",
            "itemtype": "method",
            "name": "_hasDataOverflow",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "Boolean"
            },
            "class": "NumericAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 10,
            "description": "Calculates and returns a `seriesCollection`.",
            "itemtype": "method",
            "name": "_getSeriesCollection",
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 52,
            "description": "Creates `Axis` instances.",
            "itemtype": "method",
            "name": "_parseAxes",
            "params": [
                {
                    "name": "val",
                    "description": "Object containing `Axis` instances or objects in which to construct `Axis` instances.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 105,
            "description": "Adds axes to the chart.",
            "itemtype": "method",
            "name": "_addAxes",
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 145,
            "description": "Renders the Graph.",
            "itemtype": "method",
            "name": "_addSeries",
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 164,
            "description": "Parse and sets the axes for the chart.",
            "itemtype": "method",
            "name": "_parseSeriesAxes",
            "params": [
                {
                    "name": "c",
                    "description": "A collection `PieSeries` instance.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 209,
            "description": "Generates and returns a key-indexed object containing `Axis` instances or objects used to create `Axis` instances.",
            "itemtype": "method",
            "name": "_getDefaultAxes",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 249,
            "description": "Returns an object literal containing a categoryItem and a valueItem for a given series index.",
            "itemtype": "method",
            "name": "getSeriesItem",
            "params": [
                {
                    "name": "series",
                    "description": "Reference to a series."
                },
                {
                    "name": "index",
                    "description": "Index of the specified item within a series."
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 274,
            "description": "Handler for sizeChanged event.",
            "itemtype": "method",
            "name": "_sizeChanged",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 286,
            "description": "Redraws the chart instance.",
            "itemtype": "method",
            "name": "_redraw",
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 306,
            "description": "Formats tooltip text for a pie chart.",
            "itemtype": "method",
            "name": "_tooltipLabelFunction",
            "params": [
                {
                    "name": "categoryItem",
                    "description": "An object containing the following:\n <dl>\n     <dt>axis</dt><dd>The axis to which the category is bound.</dd>\n     <dt>displayName</dt><dd>The display name set to the category (defaults to key if not provided)</dd>\n     <dt>key</dt><dd>The key of the category.</dd>\n     <dt>value</dt><dd>The value of the category</dd>\n </dl>",
                    "type": "Object"
                },
                {
                    "name": "valueItem",
                    "description": "An object containing the following:\n <dl>\n     <dt>axis</dt><dd>The axis to which the item's series is bound.</dd>\n     <dt>displayName</dt><dd>The display name of the series. (defaults to key if not provided)</dd>\n     <dt>key</dt><dd>The key for the series.</dd>\n     <dt>value</dt><dd>The value for the series item.</dd> \n </dl>",
                    "type": "Object"
                },
                {
                    "name": "itemIndex",
                    "description": "The index of the item within the series.",
                    "type": "Number"
                },
                {
                    "name": "series",
                    "description": "The `PieSeries` instance of the item.",
                    "type": "CartesianSeries"
                },
                {
                    "name": "seriesIndex",
                    "description": "The index of the series in the `seriesCollection`.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "HTML"
            },
            "access": "private",
            "tagname": "",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 345,
            "description": "Returns the appropriate message based on the key press.",
            "itemtype": "method",
            "name": "_getAriaMessage",
            "params": [
                {
                    "name": "key",
                    "description": "The keycode that was pressed.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 398,
            "description": "Sets the aria description for the chart.",
            "itemtype": "attribute",
            "name": "ariaDescription",
            "type": "String",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 418,
            "description": "Axes to appear in the chart.",
            "itemtype": "attribute",
            "name": "axes",
            "type": "Object",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 436,
            "description": "Collection of series to appear on the chart. This can be an array of Series instances or object literals\nused to describe a Series instance.",
            "itemtype": "attribute",
            "name": "seriesCollection",
            "type": "Array",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChart.js",
            "line": 455,
            "description": "Type of chart when there is no series collection specified.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "class": "PieChart",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieChartLegend.js",
            "line": 2,
            "description": "Redraws the chart instance.",
            "itemtype": "method",
            "name": "_redraw",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "charts",
            "_global": true
        },
        {
            "file": "tests/input/charts/PieChartLegend.js",
            "line": 123,
            "description": "The legend for the chart.",
            "itemtype": "attribute",
            "name": "",
            "type": "Legend",
            "class": "",
            "module": "charts",
            "_global": true
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 11,
            "description": "Image map used for interactivity when rendered with canvas.",
            "itemtype": "property",
            "name": "_map",
            "type": "HTMLElement",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 20,
            "description": "Image used for image map when rendered with canvas.",
            "itemtype": "property",
            "name": "_image",
            "type": "HTMLElement",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 29,
            "description": "Creates or updates the image map when rendered with canvas.",
            "itemtype": "method",
            "name": "_setMap",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 65,
            "description": "Storage for `categoryDisplayName` attribute.",
            "itemtype": "property",
            "name": "_categoryDisplayName",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 73,
            "description": "Storage for `valueDisplayName` attribute.",
            "itemtype": "property",
            "name": "_valueDisplayName",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 81,
            "description": "Adds event listeners.",
            "itemtype": "method",
            "name": "addListeners",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 106,
            "description": "Draws the series.",
            "itemtype": "method",
            "name": "validate",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 118,
            "description": "Event handler for the categoryAxisChange event.",
            "itemtype": "method",
            "name": "_categoryAxisChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 132,
            "description": "Event handler for the valueAxisChange event.",
            "itemtype": "method",
            "name": "_valueAxisChangeHandler",
            "params": [
                {
                    "name": "e",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 146,
            "description": "Constant used to generate unique id.",
            "itemtype": "property",
            "name": "GUID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 155,
            "description": "Event handler for categoryDataChange event.",
            "itemtype": "method",
            "name": "_categoryDataChangeHandler",
            "params": [
                {
                    "name": "event",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 170,
            "description": "Event handler for valueDataChange event.",
            "itemtype": "method",
            "name": "_valueDataChangeHandler",
            "params": [
                {
                    "name": "event",
                    "description": "Event object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 185,
            "description": "Draws the series. Overrides the base implementation.",
            "itemtype": "method",
            "name": "draw",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 219,
            "description": "Draws the markers",
            "itemtype": "method",
            "name": "drawPlots",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 345,
            "description": "Adds an interactive map when rendering in canvas.",
            "itemtype": "method",
            "name": "_addHotspot",
            "params": [
                {
                    "name": "cfg",
                    "description": "Object containing data used to draw the hotspot",
                    "type": "Object"
                },
                {
                    "name": "seriesIndex",
                    "description": "Index of series in the `seriesCollection`.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Index of the marker using the hotspot.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 402,
            "description": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 427,
            "description": "Creates a shape to be used as a marker.",
            "itemtype": "method",
            "name": "_createMarker",
            "params": [
                {
                    "name": "styles",
                    "description": "Hash of style properties.",
                    "type": "Object"
                },
                {
                    "name": "order",
                    "description": "Order of the series.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Index within the series associated with the marker.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Shape"
            },
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 448,
            "description": "Creates a cache of markers for reuse.",
            "itemtype": "method",
            "name": "_createMarkerCache",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 470,
            "description": "Gets the default style values for the markers.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 499,
            "description": "Collection of default colors used for lines in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultLineColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 508,
            "description": "Collection of default colors used for marker fills in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultFillColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 517,
            "description": "Collection of default colors used for marker borders in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultBorderColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 526,
            "description": "Collection of default colors used for area fills, histogram fills and pie fills in a series when not specified by user.",
            "itemtype": "property",
            "name": "_defaultSliceColors",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 535,
            "description": "Colors used if style colors are not specified",
            "itemtype": "method",
            "name": "_getDefaultColor",
            "params": [
                {
                    "name": "index",
                    "description": "Index indicating the series order.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "Indicates which type of object needs the color.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 564,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "pie",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 575,
            "description": "Order of this instance of this `type`.",
            "itemtype": "attribute",
            "name": "order",
            "type": "Number",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 583,
            "description": "Reference to the `Graph` in which the series is drawn into.",
            "itemtype": "attribute",
            "name": "graph",
            "type": "Graph",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 591,
            "description": "Reference to the `Axis` instance used for assigning \ncategory values to the graph.",
            "itemtype": "attribute",
            "name": "categoryAxis",
            "type": "Axis",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 607,
            "description": "Reference to the `Axis` instance used for assigning \nseries values to the graph.",
            "itemtype": "attribute",
            "name": "categoryAxis",
            "type": "Axis",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 623,
            "description": "Indicates which array to from the hash of value arrays in \nthe category `Axis` instance.",
            "itemtype": "attribute",
            "name": "categoryKey",
            "type": "String",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 638,
            "description": "Indicates which array to from the hash of value arrays in \nthe value `Axis` instance.",
            "itemtype": "attribute",
            "name": "valueKey",
            "type": "String",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 654,
            "description": "Name used for for displaying category data",
            "itemtype": "attribute",
            "name": "categoryDisplayName",
            "type": "String",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 673,
            "description": "Name used for for displaying value data",
            "itemtype": "attribute",
            "name": "valueDisplayName",
            "type": "String",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 692,
            "itemtype": "attribute",
            "name": "slices",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/PieSeries.js",
            "line": 699,
            "description": "Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>colors</dt><dd>An array of colors to be used for the marker fills. The color for each marker is retrieved from the \n             array below:<br/>\n             `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n             </dd>\n             <dt>alphas</dt><dd>An array of alpha references (Number from 0 to 1) indicating the opacity of each marker fill. The default value is [1].</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>An array of colors to be used for the marker borders. The color for each marker is retrieved from the\n             array below:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "PieSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 22,
            "description": "Storage for default marker styles.",
            "itemtype": "property",
            "name": "_plotDefaults",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 31,
            "description": "Draws the markers",
            "itemtype": "method",
            "name": "drawPlots",
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 119,
            "description": "Pre-defined group shapes.",
            "itemtype": "property",
            "name": "_groupShapes",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 132,
            "description": "Returns the correct group shape class.",
            "itemtype": "method",
            "name": "_getGroupShape",
            "params": [
                {
                    "name": "shape",
                    "description": "Indicates which shape class.",
                    "type": "Shape | String"
                }
            ],
            "return": {
                "description": "Function"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 149,
            "description": "Gets the default values for series that use the utility. This method is used by\nthe class' `styles` attribute's getter to get build default values.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 180,
            "description": "Collection of markers to be used in the series.",
            "itemtype": "property",
            "name": "_markers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 189,
            "description": "Collection of markers to be re-used on a series redraw.",
            "itemtype": "property",
            "name": "_markerCache",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 198,
            "description": "Gets and styles a marker. If there is a marker in cache, it will use it. Otherwise\nit will create one.",
            "itemtype": "method",
            "name": "getMarker",
            "params": [
                {
                    "name": "styles",
                    "description": "Hash of style properties.",
                    "type": "Object"
                },
                {
                    "name": "order",
                    "description": "Order of the series.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Index within the series associated with the marker.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Shape"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 240,
            "description": "Creates a shape to be used as a marker.",
            "itemtype": "method",
            "name": "_createMarker",
            "params": [
                {
                    "name": "styles",
                    "description": "Hash of style properties.",
                    "type": "Object"
                },
                {
                    "name": "order",
                    "description": "Order of the series.",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Index within the series associated with the marker.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Shape"
            },
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 262,
            "description": "Creates a cache of markers for reuse.",
            "itemtype": "method",
            "name": "_createMarkerCache",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 286,
            "description": "Draws a series of markers in a single shape instance.",
            "itemtype": "method",
            "name": "_createGroupMarkers",
            "params": [
                {
                    "name": "styles",
                    "description": "Set of configuration properties used to create the markers.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 339,
            "description": "Toggles visibility",
            "itemtype": "method",
            "name": "_toggleVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "indicates visibilitye",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 366,
            "description": "Removes unused markers from the marker cache",
            "itemtype": "method",
            "name": "_clearMarkerCache",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 385,
            "description": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 417,
            "description": "Parses a color from an array.",
            "itemtype": "method",
            "name": "_getItemColor",
            "params": [
                {
                    "name": "val",
                    "description": "collection of colors",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 435,
            "description": "Method used by `styles` setter. Overrides base implementation.",
            "itemtype": "method",
            "name": "_setStyles",
            "params": [
                {
                    "name": "newStyles",
                    "description": "Hash of properties to update.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 449,
            "description": "Combines new styles with existing styles.",
            "itemtype": "method",
            "name": "_parseMarkerStyles",
            "params": [
                {
                    "name": "Object",
                    "description": "containing style properties for the marker.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 475,
            "description": "Returns marker state based on event type",
            "itemtype": "method",
            "name": "_getState",
            "params": [
                {
                    "name": "type",
                    "description": "event type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Plots.js",
            "line": 504,
            "itemtype": "property",
            "name": "_statSyles",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Plots",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RectGroup.js",
            "line": 16,
            "description": "Updates the rect.",
            "itemtype": "method",
            "name": "_draw",
            "access": "private",
            "tagname": "",
            "class": "GroupRect",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 12,
            "description": "Style properties for class",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 32,
            "description": "The graphic in which drawings will be rendered.",
            "itemtype": "attribute",
            "name": "graphic",
            "type": "Graphic",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 43,
            "description": "Storage for `styles` attribute.",
            "itemtype": "property",
            "name": "_styles",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 52,
            "description": "Method used by `styles` setter.",
            "itemtype": "method",
            "name": "_setStyles",
            "params": [
                {
                    "name": "newStyles",
                    "description": "Hash of properties to update.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 66,
            "description": "Merges to object literals so that only specified properties are \noverwritten.",
            "itemtype": "method",
            "name": "_mergeStyles",
            "params": [
                {
                    "name": "a",
                    "description": "Hash of new styles",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "Hash of original styles",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/Renderer.js",
            "line": 97,
            "description": "Gets the default value for the `styles` attribute.",
            "itemtype": "method",
            "name": "_getDefaultStyles",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Renderer",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 11,
            "description": "Default margins for text fields.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getDefaultMargins",
            "return": {
                "description": "Object"
            },
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 28,
            "description": "Sets the length of the tick on either side of the axis line.",
            "itemtype": "method",
            "name": "setTickOffset",
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 65,
            "description": "Draws a tick",
            "itemtype": "method",
            "name": "drawTick",
            "params": [
                {
                    "name": "path",
                    "description": "reference to the path `Path` element in which to draw the tick.",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "Point on the axis in which the tick will intersect.",
                    "type": "Object"
                },
                {
                    "name": "{Object)",
                    "description": "tickStyle Hash of properties to apply to the tick."
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 85,
            "description": "Calculates the coordinates for the first point on an axis.",
            "itemtype": "method",
            "name": "getLineStart",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 112,
            "description": "Calculates the point for a label.",
            "itemtype": "method",
            "name": "getLabelPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point on the axis in which the tick will intersect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 125,
            "description": "Updates the value for the `maxLabelSize` for use in calculating total size.",
            "itemtype": "method",
            "name": "updateMaxLabelSize",
            "params": [
                {
                    "name": "label",
                    "description": "to measure",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 156,
            "description": "Determines the available label width when the axis width has been explicitly set.",
            "itemtype": "method",
            "name": "getExplicitlySized",
            "return": {
                "description": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 178,
            "description": "Rotate and position title.",
            "itemtype": "method",
            "name": "positionTitle",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 208,
            "description": "Rotate and position labels.",
            "itemtype": "method",
            "name": "positionLabel",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                },
                {
                    "name": "pt",
                    "description": "hash containing the x and y coordinates in which the label will be positioned\nagainst.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 261,
            "description": "Adjusts the coordinates of an axis label based on the rotation.",
            "itemtype": "method",
            "name": "_setRotationCoords",
            "params": [
                {
                    "name": "props",
                    "description": "Coordinates, dimension and rotation properties of the label.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 298,
            "description": "Returns the transformOrigin to use for an axis label based on the position of the axis \nand the rotation of the label.",
            "itemtype": "method",
            "name": "_getTransformOrigin",
            "params": [
                {
                    "name": "rot",
                    "description": "The rotation (in degrees) of the label.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 329,
            "description": "Adjusts position for inner ticks.",
            "itemtype": "method",
            "name": "offsetNodeForTick",
            "params": [
                {
                    "name": "cb",
                    "description": "contentBox of the axis",
                    "type": "Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/RightAxisLayout.js",
            "line": 344,
            "description": "Assigns a height based on the size of the contents.",
            "itemtype": "method",
            "name": "setCalculatedSize",
            "access": "protected",
            "tagname": "",
            "class": "RightAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/ShapeGroup.js",
            "line": 40,
            "description": "Updates the shape.",
            "itemtype": "method",
            "name": "_draw",
            "access": "private",
            "tagname": "",
            "class": "ShapeGroup",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/ShapeGroup.js",
            "line": 102,
            "description": "Parses and array of lengths into radii",
            "itemtype": "method",
            "name": "_getRadiusCollection",
            "params": [
                {
                    "name": "val",
                    "description": "Array of lengths",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "ShapeGroup",
            "module": "graphics",
            "_global": false
        },
        {
            "file": "tests/input/charts/SplineSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "SplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/SplineSeries.js",
            "line": 25,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "spline",
            "class": "SplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/SplineSeries.js",
            "line": 36,
            "description": "Style properties used for drawing lines. This attribute is inherited from `Renderer`. Below are the default values:\n <dl>\n     <dt>color</dt><dd>The color of the line. The default value is determined by the order of the series on the graph. The color will be\n     retrieved from the following array: \n     `[\"#426ab3\", \"#d09b2c\", \"#000000\", \"#b82837\", \"#b384b5\", \"#ff7200\", \"#779de3\", \"#cbc8ba\", \"#7ed7a6\", \"#007a6c\"]`\n     <dt>weight</dt><dd>Number that indicates the width of the line. The default value is 6.</dd>\n     <dt>alpha</dt><dd>Number between 0 and 1 that indicates the opacity of the line. The default value is 1.</dd>\n     <dt>lineType</dt><dd>Indicates whether the line is solid or dashed. The default value is solid.</dd> \n     <dt>dashLength</dt><dd>When the `lineType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>gapSpace</dt><dd>When the `lineType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n     <dt>connectDiscontinuousPoints</dt><dd>Indicates whether or not to connect lines when there is a missing or null value between points. The default value is true.</dd> \n     <dt>discontinuousType</dt><dd>Indicates whether the line between discontinuous points is solid or dashed. The default value is solid.</dd>\n     <dt>discontinuousDashLength</dt><dd>When the `discontinuousType` is dashed, indicates the length of the dash. The default value is 10.</dd>\n     <dt>discontinuousGapSpace</dt><dd>When the `discontinuousType` is dashed, indicates the distance between dashes. The default value is 10.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "SplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAreaSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Calculates the coordinates for the series. Overrides base implementation.",
            "itemtype": "method",
            "name": "setAreaData",
            "class": "StackedAreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAreaSeries.js",
            "line": 25,
            "access": "protected",
            "tagname": "Draws the series",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "StackedAreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAreaSeries.js",
            "line": 38,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedArea",
            "class": "StackedAreaSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAreaSplineSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "StackedAreaSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAreaSplineSeries.js",
            "line": 26,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedAreaSpline",
            "class": "StackedAreaSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedAxis.js",
            "line": 20,
            "description": "Calculates the maximum and minimum values for the `Axis`.",
            "itemtype": "method",
            "name": "_updateMinAndMax",
            "access": "private",
            "tagname": "",
            "class": "StackedAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 190,
            "access": "protected",
            "tagname": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 237,
            "access": "protected",
            "tagname": "Returns default values for the `styles` attribute.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 276,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedBar",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 287,
            "description": "Direction of the series",
            "itemtype": "attribute",
            "name": "direction",
            "type": "String",
            "default": "vertical",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 298,
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "negativeBaseValues",
            "type": "Array",
            "default": "null",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 309,
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "positiveBaseValues",
            "type": "Array",
            "default": "null",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedBarSeries.js",
            "line": 320,
            "description": "Style properties used for drawing markers. This attribute is inherited from `BarSeries`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>height</dt><dd>indicates the width of the marker. The default value is 24.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "StackedBarSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 12,
            "description": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "access": "protected",
            "tagname": "",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 189,
            "description": "Resizes and positions markers based on a mouse interaction.",
            "itemtype": "method",
            "name": "updateMarkerState",
            "params": [
                {
                    "name": "type",
                    "description": "state of the marker",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "index of the marker",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 238,
            "description": "Gets the default values for the markers.",
            "itemtype": "method",
            "name": "_getPlotDefaults",
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 276,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedColumn",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 287,
            "itemtype": "attribute",
            "name": "negativeBaseValues",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 297,
            "itemtype": "attribute",
            "name": "positiveBaseValues",
            "type": "Array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedColumnSeries.js",
            "line": 307,
            "description": "Style properties used for drawing markers. This attribute is inherited from `ColumnSeries`. Below are the default values:\n <dl>\n     <dt>fill</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`\n             </dd>\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>border</dt><dd>A hash containing the following values:\n         <dl>\n             <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color\n             will be retrieved from the below array:<br/>\n             `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`\n             <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>\n             <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>\n         </dl>\n     </dd>\n     <dt>width</dt><dd>indicates the width of the marker. The default value is 24.</dd>\n     <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default \n     values for each style is null. When an over style is not set, the non-over value will be used. For example,\n     the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>\n </dl>",
            "itemtype": "attribute",
            "name": "styles",
            "type": "Object",
            "class": "StackedColumnSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSeries.js",
            "line": 14,
            "access": "protected",
            "tagname": "Calculates the coordinates for the series. Overrides base implementation.",
            "itemtype": "method",
            "name": "setAreaData",
            "class": "StackedComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSeries.js",
            "line": 27,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "StackedComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSeries.js",
            "line": 52,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedCombo",
            "class": "StackedComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSeries.js",
            "line": 63,
            "description": "Indicates whether a fill is displayed.",
            "itemtype": "attribute",
            "name": "showAreaFill",
            "type": "Boolean",
            "default": "true",
            "class": "StackedComboSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSplineSeries.js",
            "line": 14,
            "access": "protected",
            "tagname": "Draws the series.",
            "itemtype": "method",
            "name": "drawSeries",
            "class": "StackedComboSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSplineSeries.js",
            "line": 38,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedComboSpline",
            "class": "StackedComboSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedComboSplineSeries.js",
            "line": 49,
            "description": "Indicates whether a fill is displayed.",
            "itemtype": "attribute",
            "name": "showAreaFill",
            "type": "Boolean",
            "default": "true",
            "class": "StackedComboSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedLineSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Calculates the coordinates for the series. Overrides base implementation.",
            "itemtype": "method",
            "name": "setAreaData",
            "class": "StackedLineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedLineSeries.js",
            "line": 26,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedLine",
            "class": "StackedLineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedMarkerSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Calculates the coordinates for the series. Overrides base implementation.",
            "itemtype": "method",
            "name": "setAreaData",
            "class": "StackedMarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedMarkerSeries.js",
            "line": 26,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedMarker",
            "class": "StackedMarkerSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedSplineSeries.js",
            "line": 12,
            "access": "protected",
            "tagname": "Calculates the coordinates for the series. Overrides base implementation.",
            "itemtype": "method",
            "name": "setAreaData",
            "class": "StackedSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackedSplineSeries.js",
            "line": 26,
            "description": "Read-only attribute indicating the type of series.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "default": "stackedSpline",
            "class": "StackedSplineSeries",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/StackingUtil.js",
            "line": 11,
            "access": "protected",
            "tagname": "Adjusts coordinate values for stacked series.",
            "itemtype": "method",
            "name": "_stackCoordinates",
            "class": "StackingUtil",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 19,
            "description": "Indicates whether the maximum is calculated or explicitly set.",
            "itemtype": "attribute",
            "name": "setMax",
            "readonly": "",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 37,
            "description": "Indicates whether the minimum is calculated or explicitly set.",
            "itemtype": "attribute",
            "name": "setMin",
            "readonly": "",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 55,
            "description": "The maximum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.",
            "itemtype": "attribute",
            "name": "maximum",
            "type": "Number",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 78,
            "description": "The minimum value that will appear on an axis. Unless explicitly set, this value is calculated by the `Axis`.",
            "itemtype": "attribute",
            "name": "minimum",
            "type": "Number",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 101,
            "description": "Method used for formatting a label. This attribute allows for the default label formatting method to overridden. The method use would need\nto implement the arguments below and return a `String` or an `HTMLElement`. The default implementation of the method returns a `String`. The output of this method\nwill be rendered to the DOM using `appendChild`. If you override the `labelFunction` method and return an html string, you will also need to override the Axis' \n`appendLabelFunction` to accept html as a `String`.\n<dl>\n     <dt>val</dt><dd>Label to be formatted. (`String`)</dd>\n     <dt>format</dt><dd>STRFTime string used to format the label. (optional)</dd>\n</dl>",
            "itemtype": "attribute",
            "name": "labelFunction",
            "type": "Function",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 126,
            "description": "Pattern used by the `labelFunction` to format a label.",
            "itemtype": "attribute",
            "name": "labelFormat",
            "type": "String",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 138,
            "description": "Formats a label based on the axis type and optionally specified format.",
            "itemtype": "method",
            "name": "formatLabel",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "format",
                    "description": "Pattern used to format the value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 156,
            "description": "Constant used to generate unique id.",
            "itemtype": "property",
            "name": "GUID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 165,
            "description": "Type of data used in `Axis`.",
            "itemtype": "property",
            "name": "_dataType",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 174,
            "description": "Calculates and returns a value based on the number of labels and the index of\nthe current label.",
            "itemtype": "method",
            "name": "getLabelByIndex",
            "params": [
                {
                    "name": "i",
                    "description": "Index of the label.",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "Total number of labels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 203,
            "description": "Gets an array of values based on a key.",
            "itemtype": "method",
            "name": "_getKeyArray",
            "params": [
                {
                    "name": "key",
                    "description": "Value key associated with the data array.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array in which the data resides.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 258,
            "description": "Sets data by key",
            "itemtype": "method",
            "name": "_setDataByKey",
            "params": [
                {
                    "name": "key",
                    "description": "Key value to use.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Array to use.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TimeAxis.js",
            "line": 314,
            "description": "Parses value into a number.",
            "itemtype": "method",
            "name": "_getNumber",
            "params": [
                {
                    "name": "val",
                    "description": "Value to parse into a number",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "TimeAxis",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 11,
            "description": "Default margins for text fields.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getDefaultMargins",
            "return": {
                "description": "Object"
            },
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 28,
            "description": "Sets the length of the tick on either side of the axis line.",
            "itemtype": "method",
            "name": "setTickOffsets",
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 64,
            "description": "Calculates the coordinates for the first point on an axis.",
            "itemtype": "method",
            "name": "getLineStart",
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 90,
            "description": "Draws a tick",
            "itemtype": "method",
            "name": "drawTick",
            "params": [
                {
                    "name": "path",
                    "description": "reference to the path `Path` element in which to draw the tick.",
                    "type": "Path"
                },
                {
                    "name": "pt",
                    "description": "hash containing x and y coordinates",
                    "type": "Object"
                },
                {
                    "name": "tickStyles",
                    "description": "hash of properties used to draw the tick",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 110,
            "description": "Calculates the point for a label.",
            "itemtype": "method",
            "name": "getLabelPoint",
            "params": [
                {
                    "name": "pt",
                    "description": "hash containing x and y coordinates",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 123,
            "description": "Updates the value for the `maxLabelSize` for use in calculating total size.",
            "itemtype": "method",
            "name": "updateMaxLabelSize",
            "params": [
                {
                    "name": "label",
                    "description": "to measure",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 154,
            "description": "Determines the available label height when the axis width has been explicitly set.",
            "itemtype": "method",
            "name": "getExplicitlySized",
            "return": {
                "description": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 176,
            "description": "Rotate and position title.",
            "itemtype": "method",
            "name": "positionTitle",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 206,
            "description": "Rotate and position labels.",
            "itemtype": "method",
            "name": "positionLabel",
            "params": [
                {
                    "name": "label",
                    "description": "to rotate position",
                    "type": "HTMLElement"
                },
                {
                    "name": "pt",
                    "description": "hash containing the x and y coordinates in which the label will be positioned\nagainst.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 260,
            "description": "Adjusts the coordinates of an axis label based on the rotation.",
            "itemtype": "method",
            "name": "_setRotationCoords",
            "params": [
                {
                    "name": "props",
                    "description": "Coordinates, dimension and rotation properties of the label.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 305,
            "description": "Returns the transformOrigin to use for an axis label based on the position of the axis \nand the rotation of the label.",
            "itemtype": "method",
            "name": "_getTransformOrigin",
            "params": [
                {
                    "name": "rot",
                    "description": "The rotation (in degrees) of the label.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array"
            },
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 343,
            "description": "Adjusts position for inner ticks.",
            "itemtype": "method",
            "name": "offsetNodeForTick",
            "params": [
                {
                    "name": "cb",
                    "description": "contentBox of the axis",
                    "type": "Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/charts/TopAxisLayout.js",
            "line": 354,
            "description": "Assigns a height based on the size of the contents.",
            "itemtype": "method",
            "name": "setCalculatedSize",
            "access": "protected",
            "tagname": "",
            "class": "TopAxisLayout",
            "module": "charts",
            "_global": false
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 27,
            "description": "<b>Supermethod</b> description.<br>This is a second line.",
            "itemtype": "method",
            "name": "myMethod",
            "async": 1,
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 35,
            "description": "Overwritten method see {{#crossLink \"mywidget.SuperWidget\"}}{{/crossLink}}\nalso see {{#crossLink \"mywidget.SuperWidget/myMethod\"}}{{/crossLink}}\nThis is also a test {{#davglass \"Foo\"}}{{/davglass}}",
            "itemtype": "method",
            "name": "getTargets2",
            "example": [
                "\n\n    var bar;\n"
            ],
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 46,
            "description": "Overwritten method see {{#crossLink \"mywidget.SuperWidget\"}}{{/crossLink}}\nalso see {{#crossLink \"mywidget.SuperWidget/myMethod\"}}{{/crossLink}}\nThis is also a test {{#davglass \"Foo\"}}{{/davglass}}\n\n```javascript\n\nvar test = \"hello from a code block!\";\n\n```",
            "itemtype": "method",
            "name": "getTargets3",
            "example": [
                "\n\n    var bar;\n"
            ],
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 64,
            "description": "Override Attribute",
            "itemtype": "attribute",
            "name": "focused2",
            "optional": 1,
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 70,
            "description": "Override Attribute",
            "itemtype": "attribute",
            "name": "focused3",
            "required": 1,
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 76,
            "description": "Override Property",
            "itemtype": "property",
            "name": "name2",
            "type": "String",
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 82,
            "description": "Override Event",
            "itemtype": "event",
            "name": "init2",
            "class": "mywidget.SuperWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/inherit/examplemodule.js",
            "line": 101,
            "description": "Submethod description.",
            "itemtype": "method",
            "name": "myMethod",
            "params": [
                {
                    "name": "d",
                    "description": "Foo",
                    "type": "Boolean"
                }
            ],
            "class": "mywidget.SubWidget",
            "module": "ExampleModule",
            "_global": false,
            "namespace": "mywidget"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 44,
            "description": "Alias to native browser implementation of the JSON object if available.",
            "itemtype": "property",
            "name": "Native",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 56,
            "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.",
            "itemtype": "property",
            "name": "_UNICODE_EXCEPTIONS",
            "type": "{RegExp}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 70,
            "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).",
            "itemtype": "property",
            "name": "_ESCAPES",
            "type": "{RegExp}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 80,
            "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters.",
            "itemtype": "property",
            "name": "_VALUES",
            "type": "{RegExp}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 90,
            "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring.",
            "itemtype": "property",
            "name": "_BRACKETS",
            "type": "{RegExp}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 101,
            "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters.",
            "itemtype": "property",
            "name": "_UNSAFE",
            "type": "{RegExp}",
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 111,
            "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.",
            "itemtype": "method",
            "name": "escapeException",
            "params": [
                {
                    "name": "c",
                    "description": "Unicode character",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the \\unnnn escapement of the character",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 124,
            "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.",
            "itemtype": "method",
            "name": "_revive",
            "params": [
                {
                    "name": "data",
                    "description": "Any JavaScript data",
                    "type": "MIXED"
                },
                {
                    "name": "reviver",
                    "description": "filter or mutation function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The results of the filtered data",
                "type": "MIXED"
            },
            "access": "private",
            "tagname": "",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 158,
            "description": "Parse a JSON string, returning the native JavaScript representation.",
            "params": [
                {
                    "name": "s",
                    "description": "JSON string data",
                    "type": "String"
                },
                {
                    "name": "reviver",
                    "description": "(optional) function(k,v) passed each key value\n         pair of object literals, allowing pruning or altering values",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the native JavaScript representation of the JSON string",
                "type": "MIXED"
            },
            "throws": {
                "description": "SyntaxError"
            },
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/parse.js",
            "line": 214,
            "description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support.",
            "itemtype": "property",
            "name": "useNativeParse",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-parse"
        },
        {
            "file": "tests/input/json/stringify.js",
            "line": 248,
            "description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support.",
            "itemtype": "property",
            "name": "useNativeStringify",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-stringify"
        },
        {
            "file": "tests/input/json/stringify.js",
            "line": 261,
            "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.",
            "itemtype": "method",
            "name": "dateToString",
            "params": [
                {
                    "name": "d",
                    "description": "The Date to serialize",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use a replacer function",
            "static": 1,
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-stringify"
        },
        {
            "file": "tests/input/json/stringify.js",
            "line": 285,
            "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n\n<p>Objects with cyclical references will trigger an exception.</p>\n\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "o",
                    "description": "any arbitrary value to convert to JSON string",
                    "type": "MIXED"
                },
                {
                    "name": "w",
                    "description": "(optional) whitelist of acceptable object\n                 keys to include, or a replacer function to modify the\n                 raw value before serialization",
                    "type": "Array|Function"
                },
                {
                    "name": "ind",
                    "description": "(optional) indentation character or depth of\n                 spaces to format the output.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "JSON string representation of the input",
                "type": "String"
            },
            "static": 1,
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-stringify"
        },
        {
            "file": "tests/input/json/stringify.js",
            "line": 317,
            "description": "<p>Number of occurrences of a special character within a single call to\nstringify that should trigger promotion of that character to a dedicated\npreprocess step for future calls.  This is only used in environments\nthat don't support native JSON, or when useNativeStringify is set to\nfalse.</p>\n\n<p>So, if set to 50 and an object is passed to stringify that includes\nstrings containing the special character \\x07 more than 50 times,\nsubsequent calls to stringify will process object strings through a\nfaster serialization path for \\x07 before using the generic, slower,\nreplacement process for all special characters.</p>\n\n<p>To prime the preprocessor cache, set this value to 1, then call\n<code>Y.JSON.stringify(\"<em>(all special characters to\ncache)</em>\");</code>, then return this setting to a more conservative\nvalue.</p>\n\n<p>Special characters \\ \" \\b \\t \\n \\f \\r are already cached.</p>",
            "itemtype": "property",
            "name": "charCacheThreshold",
            "static": 1,
            "default": "100",
            "type": "{Number}",
            "class": "JSON",
            "module": "json",
            "_global": false,
            "submodule": "json-stringify"
        },
        {
            "file": "tests/input/namespace/ns.js",
            "line": 9,
            "description": "Test Method",
            "itemtype": "method",
            "name": "Baz",
            "class": "Foo.Bar",
            "module": "foobar",
            "_global": false,
            "namespace": "Foo.Bar"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 38,
            "description": "test optional",
            "itemtype": "method",
            "name": "testoptional",
            "params": [
                {
                    "name": "notype",
                    "description": "my desc"
                },
                {
                    "name": "namesecond",
                    "description": "my desc",
                    "type": "Int"
                },
                {
                    "name": "namefirst",
                    "description": "my desc",
                    "type": "String"
                },
                {
                    "name": "optionalvar",
                    "description": "my desc",
                    "type": "Bool",
                    "optional": true
                },
                {
                    "name": "optionalDefault1",
                    "description": "my desc",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"defaultVal\""
                },
                {
                    "name": "optionalDefault2",
                    "description": "my desc",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"defaultVal1 defaultVal2\""
                }
            ],
            "evil": "",
            "injects": {
                "description": "uses a string parameter to populate innerHTML",
                "type": "HTML"
            },
            "return": {
                "description": "something without a type"
            },
            "throws": {
                "description": "throw error without a type"
            },
            "example": [
                "\n     This is code",
                "\n     var = 'This is more code';\n     document.title = 'Test This';"
            ],
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 58,
            "description": "test object param",
            "itemtype": "method",
            "name": "testobjectparam",
            "params": [
                {
                    "name": "anobject",
                    "description": "the object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "prop1",
                            "description": "prop1",
                            "type": "String"
                        },
                        {
                            "name": "prop2",
                            "description": "prop2",
                            "type": "Bool"
                        }
                    ]
                }
            ],
            "return": {
                "description": "something with a type",
                "type": "String"
            },
            "throws": {
                "description": "error with a type",
                "type": "Error"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 68,
            "description": "test 0..n param",
            "itemtype": "method",
            "name": "test0ton",
            "params": [
                {
                    "name": "optionalandmultiple",
                    "description": "my desc",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "something without a type"
            },
            "throws": {
                "description": "throw error without a type"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 76,
            "description": "test 1..n param",
            "itemtype": "method",
            "name": "test1ton",
            "params": [
                {
                    "name": "multiple",
                    "description": "my desc",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "something without a type"
            },
            "throws": {
                "description": "throw error without a type"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 84,
            "description": "test alternative 1..n param with ...args",
            "itemtype": "method",
            "name": "testrestparam1n",
            "params": [
                {
                    "name": "multiple",
                    "description": "my desc",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "something without a type"
            },
            "throws": {
                "description": "throw error without a type"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 93,
            "description": "test alternative 0..n param with ...args",
            "itemtype": "method",
            "name": "testrestparam0n",
            "params": [
                {
                    "name": "multiple",
                    "description": "my desc",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "something without a type"
            },
            "throws": {
                "description": "throw error without a type"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 102,
            "description": "Test newlines before descriptions.",
            "itemtype": "method",
            "name": "testNewlineBeforeDescription",
            "params": [
                {
                    "name": "foo",
                    "description": "This parameter is foo.",
                    "type": "String"
                },
                {
                    "name": "bar",
                    "description": "This parameter is bar.\n\n    It does useful things.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Sometimes true, sometimes false.\nNobody knows!",
                "type": "Boolean"
            },
            "throws": {
                "description": "Throws an error.\nCatch me.",
                "type": "Error"
            },
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 126,
            "description": "Testing really long param description paring",
            "itemtype": "method",
            "name": "reallyLongParamDesc",
            "params": [
                {
                    "name": "config",
                    "description": "Object with configuration property name/value pairs. The object can be\nused to provide default values for the objects published attributes.\n\n<p>\nThe config object can also contain the following non-attribute properties, providing a convenient\nway to configure events listeners and plugins for the instance, as part of the constructor call:\n</p>\n\n<dl>\n    <dt>on</dt>\n    <dd>An event name to listener function map, to register event listeners for the \"on\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_on\">on</a> method.</dd>\n    <dt>after</dt>\n    <dd>An event name to listener function map, to register event listeners for the \"after\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_after\">after</a> method.</dd>\n    <dt>bubbleTargets</dt>\n    <dd>An object, or array of objects, to register as bubble targets for bubbled events fired by this instance. A constructor convenience property for the <a href=\"EventTarget.html#method_addTarget\">addTarget</a> method.</dd>\n    <dt>plugins</dt>\n    <dd>A plugin, or array of plugins to be plugged into the instance (see PluginHost's plug method for signature details). A constructor convenience property for the <a href=\"Plugin.Host.html#method_plug\">plug</a> method.</dd>\n</dl>",
                    "type": "Object"
                }
            ],
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 151,
            "description": "This is the description",
            "itemtype": "method",
            "name": "foo",
            "example": [
                "\n\n        var email = \"lsmith@foo-truncated-here.com\"\n"
            ],
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 161,
            "itemtype": "method",
            "name": "foo2",
            "example": [
                "\n    @media screen and (max-width: 767px) {\n    }"
            ],
            "class": "myclass",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 180,
            "description": "Default options to use for all transactions.",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule",
            "subprops": [
                {
                    "name": "attributes",
                    "description": "HTML attribute name/value pairs that\n    should be added to inserted nodes.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "autopurge",
                    "description": "Whether or not to automatically\n    purge inserted nodes after the purge threshold is reached.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "doc",
                    "description": "Document into which nodes should be inserted.",
                    "type": "Document",
                    "optional": true
                },
                {
                    "name": "pollInterval",
                    "description": "Polling interval (in milliseconds)\n    for detecting CSS load completion in browsers that don't support the `load`\n    event on `<link>` nodes.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "50"
                }
            ]
        },
        {
            "file": "tests/input/test/test.js",
            "line": 196,
            "description": "This is a test of CASE TaGs",
            "itemtype": "method",
            "name": "testMethod",
            "params": [
                {
                    "name": "foo",
                    "description": "Foo description",
                    "type": "String"
                }
            ],
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 202,
            "description": "This is an optional attribute",
            "itemtype": "attribute",
            "name": "optionalAttr",
            "optional": 1,
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 208,
            "description": "This is a required attribute",
            "itemtype": "attribute",
            "name": "requiredAttr",
            "required": 1,
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 214,
            "description": "crash test method",
            "itemtype": "method",
            "name": "crashTest",
            "params": [
                {
                    "name": "foo",
                    "description": "The string to crash the parser",
                    "type": "String"
                }
            ],
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 220,
            "itemtype": "event",
            "name": "changeWithOptional",
            "params": [
                {
                    "name": "ev",
                    "description": "containing:",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "name",
                            "description": "Name of the field changed",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 228,
            "description": "This method fires {{#crossLink \"OtherClass2/changeWithOptional:event\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "crossedEvent",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 233,
            "description": "This method has attr {{#crossLink \"OtherClass2/requiredAttr:attribute\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "crossedAttr",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 238,
            "description": "This method has attr {{#crossLink \"OtherClass2/optionalAttr:attr\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "crossOptAttr",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 243,
            "description": "Test `\\{{foobar\\}}` `\\{{barfoo\\}}`",
            "itemtype": "method",
            "name": "hbHelper1",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 248,
            "description": "Test `\\{{foobar2\\}}` `\\{{barfoo2\\}}`",
            "itemtype": "method",
            "name": "hbHelper2",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test/test.js",
            "line": 253,
            "description": "Test `\\{{foobar3\\}}` `\\{{barfoo3\\}}`",
            "itemtype": "method",
            "name": "hbHelper3",
            "class": "OtherClass2",
            "module": "mymodule",
            "_global": false,
            "submodule": "mysubmodule"
        },
        {
            "file": "tests/input/test2/dump/dump.js",
            "line": 23,
            "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\n\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object",
            "itemtype": "method",
            "name": "dump",
            "params": [
                {
                    "name": "o",
                    "description": "The object to dump.",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "How deep to recurse child objects, default 3.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "the dump result.",
                "type": "String"
            },
            "class": "YUI~dump",
            "module": "dump",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 37,
            "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.",
            "itemtype": "method",
            "name": "augment",
            "params": [
                {
                    "name": "r",
                    "description": "the object to receive the augmentation.",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "the object that supplies the properties to augment.",
                    "type": "Function"
                },
                {
                    "name": "ov",
                    "description": "if true, properties already on the receiver\nwill be overwritten if found on the supplier.",
                    "type": "Boolean"
                },
                {
                    "name": "wl",
                    "description": "a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver.",
                    "type": "String[]"
                },
                {
                    "name": "args",
                    "description": "arg or arguments to apply to the supplier\nconstructor when initializing.",
                    "type": "Array | Any"
                }
            ],
            "return": {
                "description": "the augmented object.",
                "type": "Object"
            },
            "todo": [
                "constructor optional?",
                "understanding what an instance is augmented with",
                "best practices for overriding sequestered methods."
            ],
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 126,
            "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.",
            "itemtype": "method",
            "name": "aggregate",
            "params": [
                {
                    "name": "r",
                    "description": "the object to receive the augmentation.",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "the object that supplies the properties to augment.",
                    "type": "Function"
                },
                {
                    "name": "ov",
                    "description": "if true, properties already on the receiver\nwill be overwritten if found on the supplier.",
                    "type": "Boolean"
                },
                {
                    "name": "wl",
                    "description": "a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver.",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "the extended object.",
                "type": "Object"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 144,
            "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "r",
                    "description": "the object to modify.",
                    "type": "Function"
                },
                {
                    "name": "s",
                    "description": "the object to inherit.",
                    "type": "Function"
                },
                {
                    "name": "px",
                    "description": "prototype properties to add/override.",
                    "type": "Object"
                },
                {
                    "name": "sx",
                    "description": "static properties to add/override.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the extended object.",
                "type": "Object"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 185,
            "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "o",
                    "description": "the object to iterate.",
                    "type": "Object"
                },
                {
                    "name": "f",
                    "description": "the function to execute.  This function\nreceives the value, key, and object as parameters.",
                    "type": "Function"
                },
                {
                    "name": "c",
                    "description": "the execution context for the function.",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "if true, prototype properties are\niterated on objects.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the YUI instance.",
                "type": "YUI"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 202,
            "description": "Executes the supplied function for each item in\na collection.  The operation stops if the function\nreturns true. Supports arrays, objects, and\nY.NodeLists.",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "o",
                    "description": "the object to iterate.",
                    "type": "Object"
                },
                {
                    "name": "f",
                    "description": "the function to execute.  This function\nreceives the value, key, and object as parameters.",
                    "type": "Function"
                },
                {
                    "name": "c",
                    "description": "the execution context for the function.",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "if true, prototype properties are\niterated on objects.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "true if the function ever returns true,\nfalse otherwise.",
                "type": "Boolean"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 221,
            "description": "Deep obj/array copy.  Function clones are actually\nwrappers around the original function.\nArray-like objects are treated as arrays.\nPrimitives are returned untouched.  Optionally, a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "o",
                    "description": "what to clone.",
                    "type": "Object"
                },
                {
                    "name": "safe",
                    "description": "if true, objects will not have prototype\nitems from the source.  If false, they will.  In this case, the\noriginal is initially protected, but the clone is not completely\nimmune from changes to the source object prototype.  Also, cloned\nprototype items that are deleted from the clone will result\nin the value of the source prototype being exposed.  If operating\non a non-safe clone, items should be nulled out rather than deleted.",
                    "type": "Boolean"
                },
                {
                    "name": "f",
                    "description": "optional function to apply to each item in a\ncollection; it will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy.",
                    "type": "Function"
                },
                {
                    "name": "c",
                    "description": "optional execution context for f.",
                    "type": "Object"
                },
                {
                    "name": "owner",
                    "description": "Owner object passed when clone is iterating\nan object.  Used to set up context for cloned functions.",
                    "type": "Object"
                },
                {
                    "name": "cloned",
                    "description": "hash of previously cloned objects to avoid\nmultiple clones.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the cloned object.",
                "type": "Array|Object"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 320,
            "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the\nsupplied to the function.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "f",
                    "description": "the function to bind, or a function name\nto execute on the context object.",
                    "type": "Function|String"
                },
                {
                    "name": "c",
                    "description": "the execution context.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "0..n arguments to include before the arguments the\nfunction is executed with.",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the wrapped function.",
                "type": "Function"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/oop/oop.js",
            "line": 345,
            "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.",
            "itemtype": "method",
            "name": "rbind",
            "params": [
                {
                    "name": "f",
                    "description": "the function to bind, or a function name\nto execute on the context object.",
                    "type": "Function|String"
                },
                {
                    "name": "c",
                    "description": "the execution context.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "0..n arguments to append to the end of\narguments collection supplied to the function.",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the wrapped function.",
                "type": "Function"
            },
            "class": "YUI~oop",
            "module": "oop",
            "_global": false
        },
        {
            "file": "tests/input/test2/namespace.js",
            "line": 25,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_storageMechanisms",
            "type": "Array",
            "static": 1,
            "class": "P.storage",
            "module": "P.storage",
            "_global": false,
            "namespace": "P"
        },
        {
            "file": "tests/input/test2/slashes.js",
            "line": 12,
            "description": "Static Property",
            "itemtype": "property",
            "name": "STATIC",
            "static": 1,
            "class": "Main",
            "module": "myapp/views/index",
            "_global": false
        }
    ],
    "classinherits": [
        [
            "Base",
            "DocParser"
        ],
        [
            "AreaSeries",
            "StackedAreaSeries"
        ],
        [
            "AreaSplineSeries"
        ],
        [
            "Axis",
            "AxisType",
            "CategoryAxis"
        ],
        [
            "BarSeries",
            "StackedBarSeries"
        ],
        [
            "CartesianChart"
        ],
        [
            "Base",
            "CartesianSeries",
            "ComboSeries",
            "ComboSplineSeries"
        ],
        [
            "ChartLegend"
        ],
        [
            "ColumnSeries",
            "StackedColumnSeries"
        ],
        [
            "ComboSplineSeries"
        ],
        [
            "Graph"
        ],
        [
            "Base",
            "Gridlines"
        ],
        [
            "Base",
            "CartesianSeries",
            "LineSeries",
            "StackedLineSeries"
        ],
        [
            "Base",
            "CartesianSeries",
            "MarkerSeries",
            "PieSeries"
        ],
        [
            "Axis",
            "AxisType",
            "NumericAxis",
            "StackedAxis"
        ],
        [
            "PieChart"
        ],
        [
            "Base",
            "CartesianSeries",
            "SplineSeries",
            "StackedSplineSeries"
        ],
        [
            "AreaSeries",
            "StackedAreaSplineSeries"
        ],
        [
            "Base",
            "CartesianSeries",
            "ComboSeries",
            "StackedComboSeries",
            "StackedComboSplineSeries"
        ],
        [
            "Base",
            "CartesianSeries",
            "MarkerSeries",
            "StackedMarkerSeries"
        ],
        [
            "StackedMarkerSeries"
        ],
        [
            "StackedSplineSeries"
        ],
        [
            "Axis",
            "AxisType",
            "TimeAxis"
        ],
        [
            "SuperWidget"
        ],
        [
            "mywidget.SubWidget"
        ],
        [
            "mywidget.SubWidget2"
        ],
        [
            "LocalStore"
        ]
    ],
    "warnings": [
        {
            "message": "unknown tag: fileoverview",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:19"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1584"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1646"
        },
        {
            "message": "unknown tag: exports",
            "line": " lib/index.js:7"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " tests/input/charts/ChartLegend.js:82"
        },
        {
            "message": "unknown tag: customtag",
            "line": " tests/input/preprocessor/preprocessortest.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tests/input/test/test.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tests/input/test/test.js:68"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tests/input/test/test.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tests/input/test/test.js:84"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " tests/input/test/test.js:93"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " tests/input/test/test.js:214"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:19"
        },
        {
            "message": "Missing item type\nSplit {@code prettyPrint} into multiple timeouts so as not to interfere with\nUI events.\nIf set to {@code false}, {@code prettyPrint()} is synchronous.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:61"
        },
        {
            "message": "Missing item type\nFind all the {@code <pre>} and {@code <code>} tags in the DOM with\n{@code class=prettyprint} and prettify them.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:68"
        },
        {
            "message": "Missing item type\nPretty print a chunk of code.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:76"
        },
        {
            "message": "Missing item type\nGiven a group of {@link RegExp}s, returns a {@code RegExp} that globally\nmatches the union of the sets of strings matched by the input RegExp.\nSince it matches globally, if the input strings have a start-of-input\nanchor (/^.../), it is ignored for the purposes of unioning.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:235"
        },
        {
            "message": "Missing item type\nSplit markup into a string of source code and an array mapping ranges in\nthat string to the text nodes in which they appear.\n\n<p>\nThe HTML DOM structure:</p>\n<pre>\n(Element   \"p\"\n  (Element \"b\"\n    (Text  \"print \"))       ; #1\n  (Text    \"'Hello '\")      ; #2\n  (Element \"br\")            ; #3\n  (Text    \"  + 'World';\")) ; #4\n</pre>\n<p>\ncorresponds to the HTML\n{@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n\n<p>\nIt will produce the output:</p>\n<pre>\n{\n  sourceCode: \"print 'Hello '\\n  + 'World';\",\n  //                     1          2\n  //           012345678901234 5678901234567\n  spans: [0, #1, 6, #2, 14, #3, 15, #4]\n}\n</pre>\n<p>\nwhere #1 is a reference to the {@code \"print \"} text node above, and so\non for the other text nodes.\n</p>\n\n<p>\nThe {@code} spans array is an array of pairs.  Even elements are the start\nindices of substrings, and odd elements are the text nodes (or BR elements)\nthat contain the text for those substrings.\nSubstrings continue until the next index or the end of the source.\n</p>",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:477"
        },
        {
            "message": "Missing item type\nApply the given language handler to sourceCode and add the resulting\ndecorations to out.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:571"
        },
        {
            "message": "Missing item type\nGiven an element, if it contains only one child element and any text nodes\nit contains contain only space characters, return the sole child element.\nOtherwise returns undefined.\n<p>\nThis is meant to return the CODE element in {@code <pre><code ...>} when\nthere is a single child element that contains all the non-space textual\ncontent, but not to return anything where there are multiple child elements\nas in {@code <pre><code>...</code><code>...</code></pre>} or when there\nis textual content.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:589"
        },
        {
            "message": "Missing item type\nThe lexing function interprets the patterns to find token boundaries and\nreturns a decoration list of the form\n[index_0, style_0, index_1, style_1, ..., index_n, style_n]\nwhere index_n is an index into the sourceCode, and style_n is a style\nconstant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\nall characters in sourceCode[index_n-1:index_n].\n\nThe stylePatterns is a list whose elements have the form\n[style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n\nStyle is a style constant like PR_PLAIN, or can be a string of the\nform 'lang-FOO', where FOO is a language extension describing the\nlanguage of the portion of the token in $1 after pattern executes.\nE.g., if style is 'lang-lisp', and group 1 contains the text\n'(hello (world))', then that portion of the token will be passed to the\nregistered lisp handler for formatting.\nThe text before and after group 1 will be restyled using this decorator\nso decorators should take care that this doesn't result in infinite\nrecursion.  For example, the HTML lexer rule for SCRIPT elements looks\nsomething like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n'<script>foo()<\\/script>', which would cause the current decorator to\nbe called with '<script>' which would not match the same rule since\ngroup 1 must not be empty, so it would be instead styled as PR_TAG by\nthe generic tag rule.  The handler registered for the 'js' extension would\nthen be called with 'foo()', and finally, the current decorator would\nbe called with '<\\/script>' which would not match the original rule and\nso the generic tag rule would identify it as a tag.\n\nPattern must only match prefixes, and if it matches a prefix, then that\nmatch is considered a token with the same style.\n\nContext is applied to the last non-whitespace, non-comment token\nrecognized.\n\nShortcut is an optional string of characters, any of which, if the first\ncharacter, gurantee that this pattern and only this pattern matches.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:613"
        },
        {
            "message": "Missing item type\nLexes job.sourceCode and produces an output array job.decorations of\nstyle classes preceded by the position at which they start in\njob.sourceCode in order.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:687"
        },
        {
            "message": "Missing item type\nare style markers (e.g., PR_COMMENT) that run from that position until\nthe end.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:700"
        },
        {
            "message": "Missing item type\nThis code treats \", ', and ` as string delimiters, and \\ as a string\n escape.  It does not recognize perl's qq() style strings.\n It has no special handling for double delimiter escapes as in basic, or\n the tripled delimiters used in python, but should work on those regardless\n although in those cases a single string literal may be broken up into\n multiple adjacent string literals.\nIt recognizes C, C++, and shell style comments.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:787"
        },
        {
            "message": "Missing item type\nGiven a DOM subtree, wraps it in a list, and puts each line into its own\nlist item.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:961"
        },
        {
            "message": "Missing item type\nBreaks {@code job.sourceCode} around style boundaries in\n{@code job.decorations} and modifies {@code job.sourceNode} in place.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1100"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1224"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1226"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1368"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1387"
        },
        {
            "message": "Missing item type\nContains functions for creating and registering new language handlers.",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1536"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1584"
        },
        {
            "message": "Missing item type",
            "line": " conf/docs/assets/vendor/prettify/prettify.js:1646"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/builder.js:2"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/cli.js:3"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/docparser.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/docview.js:2"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/files.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/help.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/index.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/options.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/project.js:2"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/server.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/utils.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttps://github.com/yui/yuidoc/blob/master/LICENSE",
            "line": " lib/yuidoc.js:1"
        }
    ]
}